package com.tyh.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.tyh.common.CommonParam;
import com.tyh.mapper.B_Goods_ExtMapper;
import com.tyh.model.B_Bank;
import com.tyh.model.B_Bill;
import com.tyh.model.B_Catalog;
import com.tyh.model.B_Goods;
import com.tyh.model.B_Goods_Ext;
import com.tyh.model.B_Goods_Focus;
import com.tyh.model.B_Goods_Img;
import com.tyh.model.B_Goods_Reply;
import com.tyh.model.B_Goods_Store;
import com.tyh.model.B_Merge;
import com.tyh.model.B_Order;
import com.tyh.model.B_Order_Detail;
import com.tyh.model.B_Order_Track;
import com.tyh.model.B_Return;
import com.tyh.model.B_Shop;
import com.tyh.model.B_Spec;
import com.tyh.model.B_User;
import com.tyh.model.B_User_Addr;
import com.tyh.model.B_User_Car;
import com.tyh.model.B_User_Voucher;
import com.tyh.model.CheckCode;
import com.tyh.model.Gslc;
import com.tyh.model.GslcCount;
import com.tyh.model.ImgSet;
import com.tyh.model.ListMap;
import com.tyh.model.ProConfig;
import com.tyh.model.ProConfigMap;
import com.tyh.model.Recharge;
import com.tyh.model.RedPacket;
import com.tyh.model.RedPacketRecord;
import com.tyh.model.ReplyUser;
import com.tyh.model.ShopCatalog;
import com.tyh.model.ShopGoods;
import com.tyh.model.SysVersion;
import com.tyh.model.Trade;
import com.tyh.model.Voucher;
import com.tyh.model.zanCount;
import com.tyh.service.B_CatalogService;
import com.tyh.service.B_GoodsService;
import com.tyh.service.B_Goods_ExtService;
import com.tyh.service.B_Goods_ImgService;
import com.tyh.service.B_Goods_ReplyService;
import com.tyh.service.B_Goods_StoreService;
import com.tyh.service.B_OrderService;
import com.tyh.service.B_Order_DetailService;
import com.tyh.service.B_ReturnService;
import com.tyh.service.B_SpecService;
import com.tyh.service.B_UserService;
import com.tyh.service.B_User_AddrService;
import com.tyh.service.B_User_CarService;
import com.tyh.service.GslcService;
import com.tyh.service.RechargeService;
import com.tyh.service.RedPacketService;
import com.tyh.service.ShopGoodsService;
import com.tyh.service.SysService;
import com.tyh.service.TradeService;
import com.tyh.service.VoucherService;
import com.tyh.unitl.DateUtils;
import com.tyh.unitl.FileUnitl;
import com.tyh.unitl.JavaSmsApi;
import com.tyh.unitl.MD5Code;
import com.tyh.unitl.NumberUtil;
import com.tyh.unitl.PageInfo;
import com.tyh.unitl.WxPayUtil;
import com.tyh.unitl.ZfbPayUtil;
import com.tyh.unitl.ZxingHandler;
import com.tyh.unitl.wx.TenpayUtil;


@Controller
@RequestMapping("/app")
public class AppController {
	@Autowired
    private B_UserService userService;
	@Autowired
    private B_OrderService orderService;
	@Autowired
    private B_User_CarService carService;
	@Autowired
    private B_GoodsService goodsService;
	@Autowired
    private B_Goods_StoreService storeService;
	@Autowired
    private B_User_AddrService addrService;
	@Autowired
    private RedPacketService redPacketService;
	@Autowired
    private B_Order_DetailService detailService;
	@Autowired
    private B_SpecService specService;
	@Autowired
    private B_CatalogService catalogService;
	@Autowired
    private ShopGoodsService shopGoodsService;
	@Autowired
    private B_Goods_ExtService extService;
	@Autowired
    private B_Goods_ImgService imgService;
	@Autowired
    private B_Goods_ReplyService replyService;
	@Autowired
    private B_ReturnService returnService ;
	@Autowired
	private RechargeService rechargeService;
	@Resource
	private B_Goods_ExtMapper goodsExtMapper;
	@Autowired
	private SysService sysService;
	@Autowired
	private VoucherService voucherService;
	@Autowired
	private TradeService tradeService;
	@Autowired
	private GslcService gslcService;
	
	String ASSET_URL = ProConfigMap.configMap.get("RESOURECE_URL");
	Logger logger = Logger.getLogger(this.getClass());
	
	@ResponseBody
	@RequestMapping("/updateUserData")
	public void updateUserData(HttpServletRequest request,String flag) throws Exception{
		if (flag.equals("pro")) {
			//省级代理
			List<B_User> proUserList = userService.selectByRoleId(CommonParam.USER_ROLE_PRO);
			for (Iterator iterator = proUserList.iterator(); iterator.hasNext();) {
				B_User b_User = (B_User) iterator.next();
				Map<String, Object> map = redPacketService.selectRedRecordByUserId(b_User.getId());
				String bonus = ProConfigMap.configMap.get("provincialAgency");
				BigDecimal a1 = new BigDecimal(map.get("totalMoney").toString());
				BigDecimal b1 = new BigDecimal(bonus);
				Double monthBonus = a1.divide(b1,8,BigDecimal.ROUND_HALF_UP).doubleValue();
				b_User.setTotalComs(monthBonus);
				userService.updateComs(b_User);
			}
		}else if (flag.equals("city")) {
			//市级代理
			List<B_User> proUserList = userService.selectByRoleId(CommonParam.USER_ROLE_CITY);
			for (Iterator iterator = proUserList.iterator(); iterator.hasNext();) {
				B_User b_User = (B_User) iterator.next();
				Map<String, Object> map = redPacketService.selectRedRecordByUserId(b_User.getId());
				String bonus = ProConfigMap.configMap.get("cityAgency");
				BigDecimal a1 = new BigDecimal(map.get("totalMoney").toString());
				BigDecimal b1 = new BigDecimal(bonus);
				Double monthBonus = a1.divide(b1,8,BigDecimal.ROUND_HALF_UP).doubleValue();
				b_User.setTotalComs(monthBonus);
				userService.updateComs(b_User);
			}
		}else if (flag.equals("town")) {
			//县区代理
			List<B_User> proUserList = userService.selectByRoleId(CommonParam.USER_ROLE_COUNT);
			for (Iterator iterator = proUserList.iterator(); iterator.hasNext();) {
				B_User b_User = (B_User) iterator.next();
				Map<String, Object> map = redPacketService.selectRedRecordByUserId(b_User.getId());
				String bonus = ProConfigMap.configMap.get("countyAgency");
				BigDecimal a1 = new BigDecimal(map.get("totalMoney").toString());
				BigDecimal b1 = new BigDecimal(bonus);
				Double monthBonus = a1.divide(b1,8,BigDecimal.ROUND_HALF_UP).doubleValue();
				b_User.setTotalComs(monthBonus);
				userService.updateComs(b_User);
			}
		}else if (flag.equals("member")) {
			//消费商
			List<B_User> proUserList = userService.selectByRoleId(CommonParam.USER_ROLE_COMER);
			for (Iterator iterator = proUserList.iterator(); iterator.hasNext();) {
				B_User b_User = (B_User) iterator.next();
				Map<String, Object> map = redPacketService.selectRedRecordByUserId(b_User.getId());
				String bonus = ProConfigMap.configMap.get("clerkMember");
				BigDecimal a1 = new BigDecimal(map.get("totalMoney").toString());
				BigDecimal b1 = new BigDecimal(bonus);
				Double monthBonus = a1.divide(b1,8,BigDecimal.ROUND_HALF_UP).doubleValue();
				b_User.setTotalComs(monthBonus);
				userService.updateComs(b_User);
			}
		}else if (flag.equals("saler")) {
			//业务员
			List<B_User> proUserList = userService.selectByRoleId(CommonParam.USER_ROLE_SALER);
			for (Iterator iterator = proUserList.iterator(); iterator.hasNext();) {
				B_User b_User = (B_User) iterator.next();
				Map<String, Object> map = redPacketService.selectRedRecordByUserId(b_User.getId());
				String bonus = ProConfigMap.configMap.get("clerkSeller");
				BigDecimal a1 = new BigDecimal(map.get("totalMoney").toString());
				BigDecimal b1 = new BigDecimal(bonus);
				Double monthBonus = a1.divide(b1,8,BigDecimal.ROUND_HALF_UP).doubleValue();
				b_User.setTotalComs(monthBonus);
				userService.updateComs(b_User);
			}
		}else if (flag.equals("shop")) {
			//商家
			List<B_User> proUserList = userService.selectByRoleId(CommonParam.USER_ROLE_SELLER);
			for (Iterator iterator = proUserList.iterator(); iterator.hasNext();) {
				B_User b_User = (B_User) iterator.next();
				Double bonus = 1-Double.parseDouble(ProConfigMap.configMap.get("gatherFee"));
				Map<String, Object> map = redPacketService.selectRedRecordByUserId(b_User.getId());
				BigDecimal a1 = new BigDecimal(map.get("totalMoney").toString());
				BigDecimal b1 = new BigDecimal(bonus.toString());
				Double monthBonus = a1.divide(b1,8,BigDecimal.ROUND_HALF_UP).doubleValue();
				b_User.setTotalComs(monthBonus);
				userService.updateComs(b_User);
				
				List<B_Order> orders = orderService.selectByStatusOrUser(null, b_User.getId(), null, null, null);
				B_Shop shop = userService.selectByUserId(b_User.getId(), 1);
				for (Iterator iterator2 = orders.iterator(); iterator2.hasNext();) {
					B_Order b_Order = (B_Order) iterator2.next();
					if (b_Order.getAssessed()!=1) {
						continue;
					}
					Double total = b_Order.getTotalPrice();
					if (b_Order.getPayWay()==4) {
						total = total-b_Order.getPrePayment();
					}
					if (b_Order.getSign()==4) {
						shop.setLineMoney(shop.getLineMoney()+total);
					}else {
						shop.setOnlineMoney(shop.getOnlineMoney()+total);
					}
					
				}
				userService.updateByPrimaryKeySelective(shop);
			}
			
		}
	}
	
	
	@RequestMapping("appRegister")
	public String toRegister(HttpServletRequest request){
		List<SysVersion> svs0 = sysService.getSysVersionList(0);
		List<SysVersion> svs1 = sysService.getSysVersionList(1);
		String userId = request.getParameter("userId");
		request.setAttribute("userId", userId);
		request.setAttribute("andr", svs0.get(0));
		request.setAttribute("ios", svs1.get(0));
		return "user/AppRegister";
	}
	
	@ResponseBody
	@RequestMapping("/registRefer")
	public Map<String, Object> registRefer(HttpServletRequest request,HttpServletResponse response) throws Exception{
		String phoneNum = request.getParameter("phoneNum");
		String password = request.getParameter("password");
		String checkCode = request.getParameter("checkCode");
		String referID = request.getParameter("referID");
		String userId = request.getParameter("userId");
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "注册成功";
		if(StringUtils.isNotBlank(password) && StringUtils.isNotBlank(checkCode)&& StringUtils.isNotBlank(phoneNum)){
			boolean checkFlag = true;
			//验证验证码
			CheckCode ck = null;
			if(StringUtils.isNotBlank(phoneNum)){
				ck = this.userService.getCheckCode(phoneNum);
			}
			if(ck==null || !ck.getCheckCode().equals(checkCode)){
				state = "210";
				msg = "验证码不正确！";
				checkFlag = false;
			}
			//验证手机号
			if(StringUtils.isNotBlank(phoneNum)){
				B_User user = this.userService.selectByPhone(phoneNum);
				if(user!=null){
					state = "220";
					msg = "该手机号已注册！";
					checkFlag = false;
				}
			}
			//正式开始注册
			if(checkFlag){
//				password = MD5Code.md5_base64(password);
				B_User user1 = userService.selectByPrimaryKey(Integer.parseInt(userId));
				String referIds = user1.getId()+"";
				if (StringUtils.isNotBlank(referID)) {
					if (!user1.getShareCode1().equals(referID)&&!user1.getShareCode2().equals(referID)) {
						map.put("state", "210");
						map.put("msg", "未查到该推荐码");
						return map;
					}
				}
				B_User user = this.userService.registUser(referIds,"", password, phoneNum, "", "","",referID,request);
				if (user==null) {
					state = "500";
					msg = "注册失败";
				}else {
					listMap.put("user", user);
					map.put("data", listMap);
				}
				
			}
		}else{
			state = "230";
			msg = "参数为空！";
		}
		
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	@ResponseBody
	@RequestMapping("/regist")
	public Map<String, Object> regist(HttpServletRequest request,HttpServletResponse response) throws Exception{
		String unionid = request.getParameter("unionid");
		String phoneNum = request.getParameter("phoneNum");
		String password = request.getParameter("password");
		String nickName = request.getParameter("nickName"); 
		String checkCode = request.getParameter("checkCode");
		String referID = request.getParameter("referID");
		String pwd2 = request.getParameter("pwd2");
		String userId = request.getParameter("userId");
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "注册成功";
		if(StringUtils.isNotBlank(unionid)){
			B_User user = this.userService.selectByUnionId(unionid);
			if(user == null){
				user = this.userService.registUser(null,unionid, password, phoneNum, nickName, "","","",request);
			}else{
				user.setNickName(nickName);
				this.userService.updateHeadImg(user);
				this.userService.updateNickName(user);
			}
			List<B_User> users = new ArrayList<B_User>();
			
			user.setPwd(null);
			users.add(user);
			
			listMap.put("list", users);
			map.put("data", listMap);
		}else if(StringUtils.isNotBlank(password) && StringUtils.isNotBlank(checkCode)
				&& StringUtils.isNotBlank(phoneNum) && StringUtils.isNotBlank(nickName) && StringUtils.isNotBlank(pwd2)){
			boolean checkFlag = true;
			//验证验证码
			CheckCode ck = null;
			if(StringUtils.isNotBlank(phoneNum)){
				ck = this.userService.getCheckCode(phoneNum);
			}
			if(ck==null || !ck.getCheckCode().equals(checkCode)){
				state = "210";
				msg = "验证码不正确！";
				checkFlag = false;
			}
			//验证手机号
			if(StringUtils.isNotBlank(phoneNum)){
				B_User user = this.userService.selectByPhone(phoneNum);
				if(user!=null){
					state = "220";
					msg = "该手机号已注册！";
					checkFlag = false;
				}
			}
			//正式开始注册
			if(checkFlag){
//				password = MD5Code.md5_base64(password);
				String referIds = "";
				if (StringUtils.isNotBlank(referID)) {
//					B_User refer = userService.selectByPrimaryKey(Integer.parseInt(referID));
					B_User refer = userService.selectByShartCode(referID);
					if (refer!=null) {
						referIds = refer.getId()+"";
					}else {
						map.put("state", "210");
						map.put("msg", "未查到该推荐码");
						return map;
					}
				}
				B_User user = this.userService.registUser(referIds,unionid, password, phoneNum, nickName, "",pwd2,referID,request);
				if (user==null) {
					state = "500";
					msg = "注册失败";
				}else {
					listMap.put("user", user);
					map.put("data", listMap);
				}
				
			}
		}else{
			state = "230";
			msg = "参数为空！";
		}
		
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	@RequestMapping("/registYph")
	public void registYph(HttpServletRequest request,HttpServletResponse response) throws Exception{
		String unionid = request.getParameter("unionid");
		
		String phoneNum = request.getParameter("phoneNum");
		String password = request.getParameter("password");
		String headPhoto = request.getParameter("headPhoto"); 
		String nickName = request.getParameter("nickName"); 
		String checkCode = request.getParameter("checkCode");
		
		//String status = request.getParameter("status");  //0:调试  1：正式版本
		
//		String deviceType = request.getParameter("deviceType");
//		String cid = request.getParameter("cid");//推送
		
		System.out.println("-->/regist.html?unionid="+unionid+"&password="+password
				+"&phoneNum="+phoneNum+"&checkCode="+checkCode
				+"&nickName="+nickName+"&headPhoto="+headPhoto);
		
		
		response.setContentType("text/html;charset=UTF-8");
		
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		int code = 1;
		String msg = "";
		
		if(StringUtils.isNotBlank(unionid)){
			B_User user = this.userService.selectByUnionId(unionid);
			if(user == null){
				user = this.userService.registUser(null,unionid, password, phoneNum, nickName, headPhoto,"","",request);
			}else{
				user.setHeadImgUrl(headPhoto);
				user.setNickName(nickName);
				this.userService.updateNickName(user);
				this.userService.updateHeadImg(user);
			}
			List<B_User> users = new ArrayList<B_User>();
			request.getSession().setAttribute("user", user);
			user.setPwd(null);
			users.add(user);
			String lastPage = (String) request.getSession().getAttribute("lastPage");
			listMap.put("list", users);
			listMap.put("lastPage", lastPage);
			map.put("data", listMap);
		}else if(StringUtils.isNotBlank(password) && StringUtils.isNotBlank(checkCode)
				&& StringUtils.isNotBlank(phoneNum) && StringUtils.isNotBlank(headPhoto) && StringUtils.isNotBlank(nickName)){
			boolean checkFlag = true;
			//验证验证码
			CheckCode ck = null;
			if(StringUtils.isNotBlank(phoneNum)){
				ck = this.userService.getCheckCode(phoneNum);
			}
			if(ck==null || !ck.getCheckCode().equals(checkCode)){
				code = -1;
				msg = "验证码不正确！";
				checkFlag = false;
			}
			//验证手机号
			if(StringUtils.isNotBlank(phoneNum)){
				B_User user = this.userService.selectByPhone(phoneNum);
				if(user!=null){
					code = -1;
					msg = "该手机号已注册！";
					checkFlag = false;
				}
			}
			//正式开始注册
			if(checkFlag){
				password = MD5Code.md5_base64(password);
				B_User user = this.userService.registUser(null,unionid, password, phoneNum, nickName, headPhoto,"","",request);
				
				List<B_User> users = new ArrayList<B_User>();
				
				user.setPwd(null);
				users.add(user);
				
				listMap.put("list", users);
				map.put("data", listMap);
			}
		}else{
			code = -1;
			msg = "参数为空！";
		}
		
		map.put("code", code);
		map.put("msg", msg);
		
		
		String jsonResult = JSON.toJSONString(map);
		
		System.out.println("注册jsonResult:"+jsonResult); 
		BaseController.ajaxResultData(response, jsonResult);
	}
	@ResponseBody
	@RequestMapping("/login")
	public Map<String, Object> login(HttpServletRequest request,HttpServletResponse response) throws Exception{
		String loginName = request.getParameter("loginName");
		String password = request.getParameter("password");
//		String deviceType = request.getParameter("deviceType"); //0: 安卓  	1：IOS
//		String cid = request.getParameter("cid");
		
		System.out.println("-->/login.html?loginName="+loginName+"&password="+password);
		
		response.setContentType("text/html;charset=UTF-8");
		
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "登录成功";
		
		if(StringUtils.isNotBlank(loginName) && StringUtils.isNotBlank(password)){ 
			password = MD5Code.md5_base64(password);
			B_User user = this.userService.selectByNamePwd(loginName, password);
			if(user==null){
				state = "210";
				msg = "账号或密码错误";
			}else{
//				if(StringUtils.isNotBlank(cid)){
//					user.setCid(cid);
//					user.setDeviceType(deviceType==null?0:Integer.parseInt(deviceType));
//					this.loginDao.updateUser(user);
//				}
				//获取融云token
//				user = loginService.getUserToken(user, status);
				//保存用户信息
//				this.loginDao.updateUser(user);
				if(user.getUserRoleId()!=null){
					String userRoleIds = user.getUserRoleId();
					String[] role = userRoleIds.split(",");
					String roleName = "";
					for (int i = 0; i < role.length; i++) {
						if (role[i].equals(CommonParam.USER_ROLE_PRO)) {
							roleName=roleName+"省级代理|";
						}else if (role[i].equals(CommonParam.USER_ROLE_CITY)) {
							roleName=roleName+"市级代理|";
						}else if (role[i].equals(CommonParam.USER_ROLE_COUNT)) {
							roleName=roleName+"区县代理|";
						}else if (role[i].equals(CommonParam.USER_ROLE_SALER)) {
							roleName=roleName+"业务员|";
						}else if (role[i].equals(CommonParam.USER_ROLE_COMER)) {
							roleName=roleName+"人人创客|";
						}else if (role[i].equals(CommonParam.USER_ROLE_SELLER)) {
							roleName=roleName+"商家|";
						}else if (role[i].equals(CommonParam.USER_ROLE_MEMBER)) {
							roleName=roleName+"会员|";
						}
					}
					roleName = roleName.substring(0, roleName.length()-1);
	 				user.setUserRoleName(roleName);
		 	 	}
	 			if(user.getJifenYes()==null){
	 				user.setJifenYes(0d);
	 			}
				String headImgUrl = user.getHeadImgUrl();
				if (!headImgUrl.contains("http")) {
					user.setHeadImgUrl(ASSET_URL+user.getHeadImgUrl());
				}
				listMap.put("user", user);
				map.put("data", listMap);
			}
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@RequestMapping("/getUserData")
	public void getMemberData(HttpServletRequest request,HttpServletResponse response){
		String userId = request.getParameter("userId");
		
		System.out.println("-->getUserData.html?userId="+userId);
		
		response.setContentType("text/html;charset=UTF-8");
		
		
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		
		int code = 1;
		String msg = "";
		
		if(StringUtils.isNotBlank(userId)){
			B_User user = this.userService.selectByPrimaryKey(Integer.parseInt(userId));
			if(user != null){
				List<B_User> users = new ArrayList<B_User>();
				user.setPwd(null);
				users.add(user);
				
				listMap.put("list", users);
				
				map.put("data", listMap);
			}
		}else{
			code = -1;
			msg = "参数为空";
		}
		map.put("code", code);
		map.put("msg", msg);
		String jsonResult = JSON.toJSONString(map);
		System.out.println("获取会员信息jsonResult:"+jsonResult); 
		BaseController.ajaxResultData(response, jsonResult);
	}
	
	@RequestMapping("/updateUser")
	public void updateUser(HttpServletRequest request,HttpServletResponse response) throws Exception{
		String userId = request.getParameter("userId");
		
		String headPhoto = request.getParameter("headPhoto"); 
		String nickName = request.getParameter("nickName");
		
		
		logger.info("-->/updateUser.html?userId="+userId+"&headPhoto="+StringUtils.isNotBlank(headPhoto)
				+"&nickName="+nickName);
		
		response.setContentType("text/html;charset=UTF-8");
		
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		
		int code = 1;
		String msg = "";
		try {
			B_User user = this.userService.selectByPrimaryKey(Integer.parseInt(userId));
			if(user==null){
				code = -1;
				msg = "用户不存在";
			}else{
				//上传头像
	     		if(StringUtils.isNotBlank(headPhoto)){
	     			String fileName = Calendar.getInstance().getTimeInMillis()+".jpg";
	     			if(new FileUnitl().GenerateImage(headPhoto, fileName)){
	     				String img_url = new FileUnitl().gethead_img_url()+fileName;
	     				user.setHeadImgUrl(img_url);
	     			}
	     		}
				if(StringUtils.isNotBlank(nickName)){
					user.setNickName(nickName);
				}
				this.userService.updateNickName(user);
				this.userService.updateHeadImg(user);
				user.setPwd(null);
				
				List<B_User> users = new ArrayList<B_User>();
				users.add(user);
				
				listMap.put("list", users);
				map.put("data", listMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		map.put("code", code);
		map.put("msg", msg);
		
		String jsonResult = JSON.toJSONString(map);
		
		logger.info("更新个人信息jsonResult:"+jsonResult); 
		BaseController.ajaxResultData(response, jsonResult);
	}
	@ResponseBody
	@RequestMapping("/updatePassword")
	public Map<String, Object> updatePassword(HttpServletRequest request,HttpServletResponse response) throws Exception{
		String phoneNum = request.getParameter("phoneNum");
		String newPassword = request.getParameter("newPassword");
		String checkCode = request.getParameter("checkCode");
		
		logger.info("-->/updatePassword.html?phoneNum="+phoneNum+"&newPassword="+newPassword
				+"&checkCode="+checkCode);
		
		response.setContentType("text/html;charset=UTF-8");
		
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "修改密码成功";
		
		if(StringUtils.isNotBlank(phoneNum) && StringUtils.isNotBlank(newPassword)
				&& StringUtils.isNotBlank(checkCode)){
			//验证验证码
			CheckCode ck = this.userService.getCheckCode(phoneNum);
			if(ck==null || !ck.getCheckCode().equals(checkCode)){
				state = "210";
				msg = "验证码不正确！";
			}else{
				B_User user = this.userService.selectByPhone(phoneNum);
				if(user==null){
					state = "220";
					msg = "用户不存在！";
				}else{
					newPassword = MD5Code.md5_base64(newPassword);
					user.setPwd(newPassword);
					this.userService.updatePhoneAndAddr(user);
				}
			}
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/sendCheckCode")
	public Map<String, Object> sendCheckCode(HttpServletRequest request,HttpServletResponse response){
		String phoneNum = request.getParameter("phoneNum");
		response.setContentType("text/html;charset=UTF-8");
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "发送成功";
		if(StringUtils.isNotBlank(phoneNum)){
			String oldCode = userService.canSendCheckCode(phoneNum);
			if(StringUtils.isBlank(oldCode)){
				oldCode = this.userService.sendCheckCode(phoneNum);
				if (StringUtils.isBlank(oldCode)) {
					state="201";
					msg = "发送失败";
				}else {
					listMap.put("code", oldCode);
				}
			}else{
				state = "300";
				msg = "验证码已发送，请查看信息！";
			}
		}else{
			state = "500";
			msg = "发送失败，手机号码为空";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("center")
	public HashMap<String, Object> mycenter(HttpServletRequest request,HttpServletResponse response) throws IOException, ParseException{
		String userId = request.getParameter("userId");
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if (StringUtils.isNotBlank(userId)) {
			B_User user = userService.selectByPrimaryKey(Integer.parseInt(userId));
			DecimalFormat df = new DecimalFormat("#.##");
			if (user!=null&&!"".equals(user)) {
				if(user.getUserRoleId()!=null){
					String userRoleIds = user.getUserRoleId();
					String[] role = userRoleIds.split(",");
					String roleName = "";
					for (int i = 0; i < role.length; i++) {
						if (role[i].equals(CommonParam.USER_ROLE_COMER)) {
							roleName="人人创客";
							break;
						}else if (role[i].equals(CommonParam.USER_ROLE_MEMBER)) {
							roleName="会员";
						}
					}
	 				user.setUserRoleName(roleName);
		 	 	}
	 			if(user.getJifenYes()==null){
	 				user.setJifenYes(0d);
	 			}
	 			if(user.getJifenNo()==null){
	 				user.setJifenNo(0d);
	 			}
				List<Map> list = orderService.selectUserOrderCount(user.getId());
				int count1 = 0, count2=0, count3=0, count4=0, count5=0; 
				if(list!=null && list.size()>0){
					for(Map map1 : list){
						Integer status = (Integer) map1.get("STATUS");
						if(status!=null){
							Long statusCount = (Long) map1.get("STATUS_COUNT");
							if(status.shortValue()==CommonParam.ORDER_STATUS_NO){
								count1+=statusCount;
							}else if(status.shortValue()==CommonParam.ORDER_STATUS_NOEMS){
								count2+=statusCount;
							}else if(status.shortValue()==CommonParam.ORDER_STATUS_EMSING){
								count3+=statusCount;
							}else if(status.shortValue()==CommonParam.ORDER_STATUS_SUCCESS){
								count4+=statusCount;
							}else if(status.shortValue()==CommonParam.ORDER_STATUS_FALSE){
								count5+=statusCount;
							}
						}
					}
				}
				listMap.put("NOPAY", count1);
				listMap.put("NOEMS", count2);
				listMap.put("EMSING", count3);
				listMap.put("SUCCESS", count4);
				listMap.put("FALSE", count5);
				Integer carCount = carService.selectGoodsCountByUserId(user.getId());
				Integer storeCount = storeService.selectGoodsCountByUserId(user.getId());
				Integer focusCount = goodsService.selectShopCountByUserId(user.getId());
				List<B_User_Addr> addrList = addrService.selectByUser_Id(user.getId(), (short) 1);
				if (addrList.size()>0) {
					listMap.put("addr",addrList.get(0).getAddr());
				}else {
					listMap.put("addr","");
				}
				listMap.put("carCount",carCount);
				listMap.put("storeCount",storeCount);
				listMap.put("focusCount",focusCount);
				RedPacket redPacket = redPacketService.selectByUserId(user.getId());
				String hxdz = "1:"+ProConfigMap.configMap.get("returnAmount");
				Integer hxdCount = 0;
				if (redPacket!=null) {
					hxdCount = redPacket.getRemaindNum();
				}
				listMap.put("hxdCount",hxdCount);
				listMap.put("hxdz",hxdz);
				String headImgUrl = user.getHeadImgUrl();
				if (!headImgUrl.contains("http")) {
					user.setHeadImgUrl(ASSET_URL+user.getHeadImgUrl());
				}
				java.text.NumberFormat nf = java.text.NumberFormat.getInstance();
				nf.setGroupingUsed(false);
				nf.setMinimumFractionDigits(0);
				nf.setMaximumFractionDigits(2);
				user.setTotalComs(nf.parse(df.format(user.getTotalComs())).doubleValue());
				user.setMonthComs(nf.parse(df.format(user.getMonthComs())).doubleValue());
				user.setTotalPayment(nf.parse(df.format(user.getTotalPayment())).doubleValue());
				user.setTotalBonus(nf.parse(df.format(user.getTotalBonus())).doubleValue());
				user.setTotalRefer(nf.parse(df.format(user.getTotalRefer())).doubleValue());
				user.setTotalpay(nf.parse(df.format(user.getTotalpay())).doubleValue());
				user.setComsYes(nf.parse(df.format(user.getComsYes())).doubleValue());
				user.setPbcTotal(user.getPbcSeller()+user.getPbcUser()+user.getPbcBlock());
				listMap.put("user",user);
				
				Long allGslc = gslcService.selectMyGslcCount(user.getId(), null);
				listMap.put("allGslc", allGslc);
				
			}else {
				state = "201";
				msg = "用户不存在";
			}
		}else{
			state = "500";
			msg = "用户id为空";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("bindPhone")
	public HashMap<String, Object> bindPhone(HttpServletRequest request,String phone,String checkCode,String userId,String pwd2) throws IOException{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "修改成功";
		if (StringUtils.isNotBlank(phone)&&StringUtils.isNotBlank(checkCode)&&StringUtils.isNotBlank(userId)) {
			B_User user = userService.selectByPrimaryKey(Integer.parseInt(userId));
			B_User user1 = userService.selectByPhone(phone);
			if (user1!=null&&!"".equals(user1)) {
				state="201";
				msg="该手机号已被使用";
			}else {
				if (!user.getPwd2().equals(MD5Code.md5_base64(pwd2))) {
					map.put("data", listMap);
					map.put("state", "220");
					map.put("msg", "二级密码错误");
					return map;
				}
				CheckCode ck = this.userService.getCheckCode(phone);
				if(ck==null || !ck.getCheckCode().equals(checkCode)){
					state = "210";
					msg = "验证码不正确！";
				}else {
					boolean send = false;
					String pwd = "";
					if (user.getPhone()==null||"".equals(user.getPhone())) {
						pwd = TenpayUtil.buildRandom(6) + "";
						user.setPwd(new MD5Code().getMD5ofStr(pwd));
						send = true;
					}
					user.setPhone(phone);
					user.setLoginName(phone);
					userService.updatePhoneAndAddr(user);
					if (send) {
						JavaSmsApi.sendPwd(phone, pwd);
					}
				}
			}
		}else {
			state = "500";
			msg = "缺少参数";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("updateNickName")
	public HashMap<String, Object> updateNickName(HttpServletRequest request,String nickName,String userId) throws IOException{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "修改成功";
		if (StringUtils.isNotBlank(nickName)&&StringUtils.isNotBlank(userId)) {
			B_User user = userService.selectByPrimaryKey(Integer.parseInt(userId));
			if (user!=null&&!"".equals(user)) {
				user.setNickName(nickName);
				userService.updateNickName(user);
			}else {
				state = "210";
				msg = "用户不存在";
			}
			
		}else {
			state = "500";
			msg = "缺少参数";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("updateHeadImgUrl")
	public HashMap<String, Object> updateHeadImgUrl(HttpServletRequest request,String headPhoto,String userId) throws IOException{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "修改成功";
		if (StringUtils.isNotBlank(headPhoto)&&StringUtils.isNotBlank(userId)) {
			B_User user = userService.selectByPrimaryKey(Integer.parseInt(userId));
			if (user!=null&&!"".equals(user)) {
				user.setHeadImgUrl(headPhoto.replace(ASSET_URL, ""));
				userService.updateHeadImg(user);
			}else {
				state = "210";
				msg = "用户不存在";
			}
			
		}else {
			state = "500";
			msg = "缺少参数";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("updateSex")
	public HashMap<String, Object> updateSex(HttpServletRequest request,String sex,String userId) throws IOException{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "修改成功";
		if (StringUtils.isNotBlank(sex)&&StringUtils.isNotBlank(userId)) {
			B_User user = userService.selectByPrimaryKey(Integer.parseInt(userId));
			if (user!=null&&!"".equals(user)) {
				user.setSex(Short.parseShort(sex));
				userService.updateSex(user);
			}else {
				state = "210";
				msg = "用户不存在";
			}
			
		}else {
			state = "500";
			msg = "缺少参数";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/updateTwoPassword")
	public Map<String, Object> updateTwoPassword(HttpServletRequest request,HttpServletResponse response) throws Exception{
		String phoneNum = request.getParameter("phoneNum");
		String newPassword = request.getParameter("newPassword");
		String checkCode = request.getParameter("checkCode");
		
		logger.info("-->/updatePassword.html?phoneNum="+phoneNum+"&newPassword="+newPassword
				+"&checkCode="+checkCode);
		
		response.setContentType("text/html;charset=UTF-8");
		
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "修改二级密码成功";
		
		if(StringUtils.isNotBlank(phoneNum) && StringUtils.isNotBlank(newPassword)
				&& StringUtils.isNotBlank(checkCode)){
			//验证验证码
			CheckCode ck = this.userService.getCheckCode(phoneNum);
			if(ck==null || !ck.getCheckCode().equals(checkCode)){
				state = "210";
				msg = "验证码不正确！";
			}else{
				B_User user = this.userService.selectByPhone(phoneNum);
				if(user==null){
					state = "220";
					msg = "用户不存在！";
				}else{
					newPassword = MD5Code.md5_base64(newPassword);
					user.setPwd2(newPassword);
					this.userService.updatePhoneAndAddr(user);
				}
			}
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/myFocusListPage")
	public Map<String, Object> myFocusListPage(HttpServletRequest request,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if(StringUtils.isNotBlank(userId)){
			int currentPage = request.getParameter("pages")==null?1:Integer.parseInt(request.getParameter("pages"));
			int pageSize = 10;
			if (currentPage<=0){
				currentPage =1;
			}	
			int currentResult = (currentPage-1) * pageSize;
			
			PageInfo page = new PageInfo();
			page.setShowCount(pageSize);
			page.setCurrentResult(currentResult);
			List<B_Goods_Focus> focusList = goodsService.selectMyFocusListPage(page, Integer.parseInt(userId));
			for(B_Goods_Focus focus:focusList){
				B_Shop shop = userService.selectShopByPrimaryKey(focus.getShopId());
				if (shop!=null) {
					shop.setLogoUrl(ASSET_URL+shop.getLogoUrl());
					focus.setShop(shop);
				}
			}
			int totalCount = page.getTotalResult();
			int lastPage=0;
			if (totalCount % pageSize==0){
				lastPage = totalCount / pageSize;
			}
			else{
				lastPage =1+ totalCount / pageSize;
			}
			if (currentPage>=lastPage){
				currentPage =lastPage;
			}
			page.setTotalPage(lastPage);
			page.setCurrentPage(currentPage);
			listMap.put("pageInfo", page);
			listMap.put("focusList", focusList);
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/deleteFocus")
	public Map<String, Object> deleteFocus(HttpServletRequest request,String focusId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if(StringUtils.isNotBlank(focusId)){
			goodsService.deleteFocus(Integer.parseInt(focusId));
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/topFocus")
	public Map<String, Object> topFocus(HttpServletRequest request,String focusId,String flag) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if(StringUtils.isNotBlank(focusId)&&StringUtils.isNotBlank(flag)){
			B_Goods_Focus focus = goodsService.selectFocusByPrimaryKey(Integer.parseInt(focusId));
			if (focus!=null) {
				focus.setFlag(Integer.parseInt(flag));
				goodsService.updateFocusSelective(focus);
			}else {
				state = "210";
				msg = "获取信息失败";
			}
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/addFocus")
	public Map<String, Object> addFocus(HttpServletRequest request,String shopId,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if(StringUtils.isNotBlank(shopId)&&StringUtils.isNotBlank(userId)){
			B_Goods_Focus focus = goodsService.getISFocused(Integer.parseInt(userId), Integer.parseInt(shopId));
			if (focus!=null) {
				map.put("data", listMap);
				map.put("state", "210");
				map.put("msg", "已关注");
				return map;
			}
			focus = new B_Goods_Focus();
			focus.setUserId(Integer.parseInt(userId));
			focus.setShopId(Integer.parseInt(shopId));
			focus.setFlag(0);
			focus.setUpdateTime(new Date());
			goodsService.insertSelective(focus);
			listMap.put("focusId", focus.getId());
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/isFocused")
	public Map<String, Object> isFocused(HttpServletRequest request,String shopId,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if(StringUtils.isNotBlank(shopId)&&StringUtils.isNotBlank(userId)){
			B_Goods_Focus focus = goodsService.getISFocused(Integer.parseInt(userId), Integer.parseInt(shopId));
			if (focus!=null) {
				listMap.put("code", 1);
				listMap.put("focusId", focus.getId());
			}else {
				listMap.put("code", 0);
			}
			
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/myBanks")
	public Map<String, Object> myBanks(HttpServletRequest request,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if(StringUtils.isNotBlank(userId)){
			List<B_Bank> bankList = userService.selectBanksByUserId(Integer.parseInt(userId),"yhk");
			listMap.put("bankList", bankList);
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/myZfb")
	public Map<String, Object> myZfb(HttpServletRequest request,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if(StringUtils.isNotBlank(userId)){
			List<B_Bank> bankList = userService.selectBanksByUserId(Integer.parseInt(userId),"zfb");
			listMap.put("bankList", bankList);
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/delBank")
	public Map<String, Object> delBank(HttpServletRequest request,String bankId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if(StringUtils.isNotBlank(bankId)){
			userService.delBank(Integer.parseInt(bankId));
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/addBank")
	public Map<String, Object> addBank(HttpServletRequest request,String bank,String checkCode,String phoneNum) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			System.out.println("addBank:::::"+bank);
			JSONObject jsonObject = JSONObject.fromObject(bank);  
			B_Bank newBank = (B_Bank) JSONObject.toBean(jsonObject,B_Bank.class);
			CheckCode ck = this.userService.getCheckCode(newBank.getPhone());
			if(ck==null || !ck.getCheckCode().equals(checkCode)){
				map.put("state", "210");
				map.put("msg", "验证码不正确！");
				return map;
			}
			newBank.setDelFlag((short) 0);
//			List<B_Bank> bankList = userService.selectBanksByUserId(newBank.getUserId(),newBank.getFlag());
//			for (Iterator iterator = bankList.iterator(); iterator.hasNext();) {
//				B_Bank b_Bank = (B_Bank) iterator.next();
//				b_Bank.setDelFlag((short) 1);
//				userService.delBank(b_Bank.getId());
//			}
			userService.insertSelective(newBank);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/myRecordListPage")
	public Map<String, Object> myRecordListPage(HttpServletRequest request,String type,String userId,String beginTime,String endTime) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if(StringUtils.isNotBlank(userId)){
			System.out.println("pages============"+request.getParameter("pages"));
			int currentPage = request.getParameter("pages")==null?1:Integer.parseInt(request.getParameter("pages"));
			int pageSize = 10;
			if (currentPage<=0){
				currentPage =1;
			}
			int currentResult = (currentPage-1) * pageSize;
			
			PageInfo page = new PageInfo();
			page.setShowCount(pageSize);
			page.setCurrentResult(currentResult);
			List<RedPacketRecord> list = redPacketService.selectByUserIdListPage(page, Integer.parseInt(userId), type,beginTime,endTime,null);
			for (Iterator iterator = list.iterator(); iterator.hasNext();) {
				RedPacketRecord redPacketRecord = (RedPacketRecord) iterator.next();
				redPacketRecord.setCreateTime(redPacketRecord.getCreateTime().substring(0, redPacketRecord.getCreateTime().length()-2));
				if (redPacketRecord.getType()==1) {
					redPacketRecord.setTypeName("推荐会员");
					redPacketRecord.setName("推荐会员");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_xfj.png");
				}else if (redPacketRecord.getType()==2) {
					redPacketRecord.setTypeName("推荐商家");
					redPacketRecord.setName("推荐商家");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_xfj.png");
				}else if (redPacketRecord.getType()==7) {
					redPacketRecord.setTypeName("周消费所分消费金");
					redPacketRecord.setName("周消费所分优惠金");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_xfj.png");
				}else if (redPacketRecord.getType()==16) {
					redPacketRecord.setTypeName("平台回购赞所得消费金");
					redPacketRecord.setName("平台回购赞所得消费金");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_xfj.png");
				}else if (redPacketRecord.getType()==22) {
					redPacketRecord.setTypeName("购买商品消费消费金");
					redPacketRecord.setName("购买商品消费消费金");
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_xfj.png");
				}else if (redPacketRecord.getType()==23) {
					redPacketRecord.setTypeName("购买商品消费到店消费金");
					redPacketRecord.setName("购买商品消费到店消费金");
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_xfj.png");
				}else if (redPacketRecord.getType()==4) {
					redPacketRecord.setTypeName("省级代理");
					redPacketRecord.setName("省级代理");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_xfj.png");
				}else if (redPacketRecord.getType()==5) {
					redPacketRecord.setTypeName("市级代理");
					redPacketRecord.setName("市级代理");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_xfj.png");
				}else if (redPacketRecord.getType()==6) {
					redPacketRecord.setTypeName("区县代理");
					redPacketRecord.setName("区县代理");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_xfj.png");
				}else if (redPacketRecord.getType()==24) {
					redPacketRecord.setTypeName("点对点交易的所得消费金");
					redPacketRecord.setName("点对点交易的所得消费金");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_xfj.png");
				}else if (redPacketRecord.getType()==25) {
					redPacketRecord.setTypeName("周消费所分到店消费金");
					redPacketRecord.setName("周消费所分到店消费金");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_xfj.png");
				}else if (redPacketRecord.getType()==28) {
					redPacketRecord.setTypeName("分享所得消费金");
					redPacketRecord.setName("分享所得消费金");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_xfj.png");
				}else if (redPacketRecord.getType()==30) {
					redPacketRecord.setTypeName("[失去升值赞]升值赞转分红赞");
					redPacketRecord.setName("升值赞转分红赞");
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_xfj.png");
				}else if (redPacketRecord.getType()==3) {
					redPacketRecord.setTypeName("商家货款");
					redPacketRecord.setName("商家货款");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_hk.png");
				}else if (redPacketRecord.getType()==10) {
					redPacketRecord.setTypeName("货款转余额");
					redPacketRecord.setName("货款转余额");
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_hk.png");
				}else if (redPacketRecord.getType()==19) {
					redPacketRecord.setTypeName("货款提现");
					redPacketRecord.setName("货款提现");
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_hk.png");
				}else if (redPacketRecord.getType()==8) {
					redPacketRecord.setTypeName("买家所得分红赞");
					redPacketRecord.setName("买家所得分红赞");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_z.png");
				}else if (redPacketRecord.getType()==9) {
					redPacketRecord.setTypeName("商家所得商家赞");
					redPacketRecord.setName("商家所得商家赞");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_z.png");
				}else if (redPacketRecord.getType()==11) {
					redPacketRecord.setTypeName("货款转余额消费商家赞");
					redPacketRecord.setName("货款转余额消费商家赞");
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_z.png");
				}else if (redPacketRecord.getType()==12) {
					String zanName = "";
					if (redPacketRecord.getRedNum()==1) {
						zanName="分红赞";
					}else if (redPacketRecord.getRedNum()==2) {
						zanName="商家赞";
					}
					redPacketRecord.setTypeName("回购卖出"+zanName);
					redPacketRecord.setName("回购卖出"+zanName);
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_z.png");
				}else if (redPacketRecord.getType()==13) {
					String zanName = "";
					if (redPacketRecord.getRedNum()==1) {
						zanName="分红赞";
					}else if (redPacketRecord.getRedNum()==2) {
						zanName="商家赞";
					}else if (redPacketRecord.getRedNum()==3) {
						zanName="升值赞";
					}
					redPacketRecord.setTypeName("点对点交易卖出"+zanName);
					redPacketRecord.setName("点对点交易卖出"+zanName);
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_z.png");
				}else if (redPacketRecord.getType()==14) {
					redPacketRecord.setTypeName("转出赞");
					redPacketRecord.setName("转出赞");
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_z.png");
				}else if (redPacketRecord.getType()==26) {
					redPacketRecord.setTypeName("转入升值赞");
					redPacketRecord.setName("转入升值赞");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_z.png");
				}else if (redPacketRecord.getType()==27) {
					redPacketRecord.setTypeName("升值赞转分红赞");
					redPacketRecord.setName("[获得分红赞]升值赞转分红赞");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_z.png");
				}else if (redPacketRecord.getType()==15) {
					redPacketRecord.setTypeName("余额提现");
					redPacketRecord.setName("余额提现");
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_ye.png");
				}else if (redPacketRecord.getType()==17) {
					redPacketRecord.setTypeName("回购赞卖出所得余额");
					redPacketRecord.setName("回购赞卖出所得余额");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_ye.png");
				}else if (redPacketRecord.getType()==18) {
					redPacketRecord.setTypeName("点对点交易所得余额");
					redPacketRecord.setName("点对点交易所得余额");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_ye.png");
				}else if (redPacketRecord.getType()==20) {
					redPacketRecord.setTypeName("货款转余额");
					redPacketRecord.setName("货款转余额");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_ye.png");
				}else if (redPacketRecord.getType()==21) {
					redPacketRecord.setTypeName("余额充值");
					redPacketRecord.setName("余额充值");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_ye.png");
				}else if (redPacketRecord.getType()==29) {
					redPacketRecord.setTypeName("点对点交易消费余额");
					redPacketRecord.setName("点对点交易消费余额");
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_ye.png");
				}else if (redPacketRecord.getType()==31) {
					redPacketRecord.setTypeName("余额购买商品");
					redPacketRecord.setName("余额购买商品");
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_ye.png");
				}else if (redPacketRecord.getType()==32) {
					String zanName = "";
					if (redPacketRecord.getRedNum()==1) {
						zanName="分红赞";
					}else if (redPacketRecord.getRedNum()==2) {
						zanName="商家赞";
					}else if (redPacketRecord.getRedNum()==3) {
						zanName="升值赞";
					}
					redPacketRecord.setTypeName("点对点交易买入"+zanName);
					redPacketRecord.setName("点对点交易买入"+zanName);
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_z.png");
				}else if (redPacketRecord.getType()==34) {
					redPacketRecord.setTypeName("升级上缴余额");
					redPacketRecord.setName("升级上缴余额");
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_ye.png");
				}else if (redPacketRecord.getType()==35) {
					redPacketRecord.setTypeName("购买矿机");
					redPacketRecord.setName("购买矿机");
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_ye.png");
				}else if (redPacketRecord.getType()==37) {
					redPacketRecord.setTypeName("挖矿消耗分红赞");
					redPacketRecord.setName("挖矿消耗分红赞");
					redPacketRecord.setNums("-"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_z.png");
				}else if (redPacketRecord.getType()==38) {
					redPacketRecord.setTypeName("挖矿结束返回分红赞");
					redPacketRecord.setName("挖矿结束返回分红赞");
					redPacketRecord.setNums("+"+redPacketRecord.getGivemoney());
					redPacketRecord.setImgUrl(ASSET_URL+"default/ic_recorder_z.png");
				}
				if (redPacketRecord.getOrderNum()!=null) {
					B_Order order = orderService.selectByorderNum(redPacketRecord.getOrderNum());
					if (order!=null) {
						List<B_Order_Detail> details = detailService.selectByorderNum(redPacketRecord.getOrderNum());
						for (Iterator iterator2 = details.iterator(); iterator2.hasNext();) {
							B_Order_Detail detail = (B_Order_Detail) iterator2.next();
							B_Goods goods = goodsService.selectByPrimaryKey(detail.getGoodsId());
//							if (goods.getHeadImgUrl()!=null) {
//								redPacketRecord.setImgUrl(ASSET_URL+goods.getHeadImgUrl());
//							}else {
//								redPacketRecord.setImgUrl(ASSET_URL+"default/user_head_default.jpg");
//							}
							redPacketRecord.setName(goods.getName());
						}
					}
				}
			}
			int totalCount = page.getTotalResult();
			
			int lastPage=0;
			if (totalCount % pageSize==0){
				lastPage = totalCount / pageSize;
			}
			else{
				lastPage =1+ totalCount / pageSize;
			}
			if (currentPage>=lastPage){
				currentPage =lastPage;
			}
			page.setTotalPage(lastPage);
			page.setCurrentPage(currentPage);
			listMap.put("pageInfo", page);
			listMap.put("recordList", list);
			if (list.size()==0&&currentPage>1) {
				map.put("state", "210");
				map.put("msg", "没有更多的数据");
			}
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	@ResponseBody
	@RequestMapping("/countDetail")
	public Map<String, Object> countDetail(HttpServletRequest request,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if (StringUtils.isNotBlank(userId)) {
			B_User user = userService.selectByPrimaryKey(Integer.parseInt(userId));
			listMap.put("pbcUser", user.getPbcUser());
			listMap.put("pbcSeller", user.getPbcSeller());
			listMap.put("pbcBlock", user.getPbcBlock());
			listMap.put("balance", user.getBalance());
			listMap.put("rechargeNum", user.getRechargeNum());
			listMap.put("rechargeBlock", user.getRechargeBlock());
			listMap.put("payment", user.getPayment());
			listMap.put("totalPbc", user.getPbcUser()+user.getPbcSeller()+user.getPbcBlock());
			listMap.put("totalRecharge", user.getRechargeNum()+user.getRechargeBlock());
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	@ResponseBody
	@RequestMapping("/addrList")
	public Map<String, Object> addrList(HttpServletRequest request,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if (StringUtils.isNotBlank(userId)) {
			List<B_User_Addr> addrList = addrService.selectByUser_Id(Integer.parseInt(userId), null);
			listMap.put("addrList", addrList);
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/addAddr")
	public Map<String, Object> addAddr(HttpServletRequest request,String addr) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		System.out.println("addAddr:::::"+addr);
		try {
			JSONObject jsonObject = JSONObject.fromObject(addr);
	        B_User_Addr newAddr = (B_User_Addr) JSONObject.toBean(jsonObject,B_User_Addr.class); 
			if(newAddr.getId()!=null){
				addrService.updateByPrimaryKeySelective(newAddr);
			}else{
				newAddr.setFlag((short) 0);
				newAddr.setDel((short) 0);
				addrService.insert(newAddr);
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/editAddr")
	public Map<String, Object> editAddr(HttpServletRequest request,String addrId,String type) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if (StringUtils.isNotBlank(addrId)&&StringUtils.isNotBlank(type)) {
			B_User_Addr addr = addrService.selectByPrimaryKey(Integer.parseInt(addrId));
			if (type.equals("del")) {
				addr.setDel((short) 1);
			}else if (type.equals("default")) {
				List<B_User_Addr> addrList = addrService.selectByUser_Id(addr.getUserId(), (short) 1);
				for (Iterator iterator = addrList.iterator(); iterator
						.hasNext();) {
					B_User_Addr b_User_Addr = (B_User_Addr) iterator.next();
					b_User_Addr.setFlag((short) 0);
					addrService.updateByPrimaryKeySelective(b_User_Addr);
				}
				addr.setFlag((short) 1);
			}
			addrService.updateByPrimaryKeySelective(addr);
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/storeList")
	public Map<String, Object> storeList(HttpServletRequest request,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if (StringUtils.isNotBlank(userId)) {
			List<B_Goods_Store> storeList = storeService.selectByUserId(Integer.parseInt(userId),null);
			for(B_Goods_Store store:storeList){
				B_Goods goods = goodsService.selectByPrimaryKey(store.getGoods().getId());
				goods.setHeadImgUrl(ASSET_URL+goods.getHeadImgUrl());
				store.setGoods(goods);
			}
			listMap.put("storeList", storeList);
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/delStore")
	public Map<String, Object> delStore(HttpServletRequest request,String storeIds) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if (StringUtils.isNotBlank(storeIds)) {
			String[] ids = storeIds.split(",");
			for (int i = 0; i < ids.length; i++) {
				storeService.deleteByPrimaryKey(Integer.parseInt(ids[i]));
			}
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/addStore")
	public Map<String, Object> addStore(HttpServletRequest request,String goodsId,String userId,String flag) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if (StringUtils.isNotBlank(goodsId)&&StringUtils.isNotBlank(userId)&&StringUtils.isNotBlank(flag)) {
			B_Goods_Store store1 = storeService.selectInStore(Integer.parseInt(userId), Integer.parseInt(goodsId),CommonParam.STORE_TYPE_GOODS);
			if (store1!=null) {
				map.put("data", listMap);
				map.put("state", "201");
				map.put("msg", "此商品已被收藏");
				return map;
			}
			B_Goods goods = goodsService.selectByPrimaryKey(Integer.parseInt(goodsId));
			B_Goods_Store store = new B_Goods_Store();
			store.setGoods(goods);
			store.setUserId(Integer.parseInt(userId));
			if (goods.getCatalogId()!=null) {
				store.setCatalogId(goods.getCatalogId());
			}
			store.setFlag(Short.parseShort(flag));
			storeService.insertSelective(store);
			listMap.put("storeIds", store.getId());
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/isStored")
	public Map<String, Object> isStored(HttpServletRequest request,String goodsId,String userId,String flag) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if (StringUtils.isNotBlank(userId)&&StringUtils.isNotBlank(goodsId)&&StringUtils.isNotBlank(flag)) {
			B_Goods_Store store = storeService.selectInStore(Integer.parseInt(userId), Integer.parseInt(goodsId),Short.parseShort(flag));
			if (store!=null) {
				listMap.put("code", 1);
			}else {
				listMap.put("code", 0);
			}
		}else{
			state = "230";
			msg = "参数为空！";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("index")
	public Map<String, Object> index(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		Map<String, String> configMap = ProConfigMap.configMap;
		List<B_Catalog> parentCatalogs  = catalogService.selectAllParent(1);
		for (Iterator iterator = parentCatalogs.iterator(); iterator.hasNext();) {
			B_Catalog b_Catalog = (B_Catalog) iterator.next();
			b_Catalog.setImgUrl(ASSET_URL+b_Catalog.getImgUrl());
		}
		listMap.put("parentCatalogList", parentCatalogs);
		List<ImgSet> bannerList = userService.getImgSet("indexBanner");
		listMap.put("bannerList", bannerList);
		//限购秒杀
		List<B_Goods> new_goodsList = goodsService.selectByFlag(null,CommonParam.FLAG_APPMS,4,CommonParam.GOODS_STATUS_UP,CommonParam.GOODS_TYPE_SALE);
//		List<ImgSet> xgmsList = userService.getImgSet("xgms");
		List<ImgSet> xgmsList = new ArrayList<ImgSet>();
		for (Iterator iterator = new_goodsList.iterator(); iterator.hasNext();) {
			B_Goods b_Goods = (B_Goods) iterator.next();
			List<B_Spec> specList = specService.selectByGoodsId(b_Goods.getId());
			B_Spec spec = specList.get(0);
			ImgSet imgSet = new ImgSet();
			imgSet.setId(b_Goods.getId()+"");
			imgSet.setType("goods");
			imgSet.setName(b_Goods.getName());
			imgSet.setImg(ASSET_URL+b_Goods.getHeadImgUrl());
			DecimalFormat format = new DecimalFormat("#");
			Double price = spec.getPrice()*b_Goods.getDiscount();
			imgSet.setxPrice(format.format(price));
			imgSet.setyPrice(spec.getPrice()+"");
			xgmsList.add(imgSet);
		}
		listMap.put("xgmsList", xgmsList);
		//惠享精选
		ImgSet hxjxImgSet = new ImgSet();
		hxjxImgSet.setId(configMap.get("hxjxImgName"));
		hxjxImgSet.setType("catalog");
		hxjxImgSet.setImg(ASSET_URL+configMap.get("hxjxImg"));
		listMap.put("hxjxImgSet", hxjxImgSet);
		//有好物
		ImgSet yhwImgSet = new ImgSet();
		yhwImgSet.setId(configMap.get("yhwImgName"));
		yhwImgSet.setType("catalog");
		if (StringUtils.isNotBlank(configMap.get("yhwImg"))) {
			yhwImgSet.setImg(ASSET_URL+configMap.get("yhwImg"));
		}
		listMap.put("yhwImgSet", yhwImgSet);
		//带你购
		ImgSet dngImgSet = new ImgSet();
		dngImgSet.setId(configMap.get("dngImgName"));
		dngImgSet.setType("catalog");
		if (StringUtils.isNotBlank(configMap.get("dngImg"))) {
			dngImgSet.setImg(ASSET_URL+configMap.get("dngImg"));
		}
		listMap.put("dngImgSet", dngImgSet);
		//会员专区
		ImgSet hyzqImgSet = new ImgSet();
		hyzqImgSet.setId(configMap.get("hyzqImgName"));
		hyzqImgSet.setType("catalog");
		if (StringUtils.isNotBlank(configMap.get("hyzqImg"))) {
			hyzqImgSet.setImg(ASSET_URL+configMap.get("hyzqImg"));
		}
		listMap.put("hyzqImgSet", hyzqImgSet);
		//品质时尚
		ImgSet pzssImgSet = new ImgSet();
		pzssImgSet.setId(configMap.get("pzssImgName"));
		pzssImgSet.setType("catalog");
		if (StringUtils.isNotBlank(configMap.get("pzssImg"))) {
			pzssImgSet.setImg(ASSET_URL+configMap.get("pzssImg"));
		}
		listMap.put("pzssImgSet", pzssImgSet);
		//最新
		ImgSet zxImgSet = new ImgSet();
		zxImgSet.setId(configMap.get("zxImgName"));
		zxImgSet.setType("catalog");
		if (StringUtils.isNotBlank(configMap.get("zxImg"))) {
			zxImgSet.setImg(ASSET_URL+configMap.get("zxImg"));
		}
		listMap.put("zxImgSet", zxImgSet);
		//公告图
		ImgSet ggImgSet = new ImgSet();
		ggImgSet.setId(configMap.get("appGgImgId"));
		ggImgSet.setType(configMap.get("appGgImgFlag"));
		if (StringUtils.isNotBlank(configMap.get("appGgImg"))) {
			ggImgSet.setImg(ASSET_URL+configMap.get("appGgImg"));
		}
		listMap.put("ggImgSet", ggImgSet);		
				
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("getGoodsByKeywordListPage")
	public Map<String, Object> getGoodsByKeywordListPage(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		int currentPage = request.getParameter("pages")==null?1:Integer.parseInt(request.getParameter("pages"));
		int pageSize = 10;
		if (currentPage<=0){
			currentPage =1;
		}
		int currentResult = (currentPage-1) * pageSize;
		
		PageInfo page = new PageInfo();
		page.setShowCount(pageSize);
		page.setCurrentResult(currentResult);
		String orderBy = request.getParameter("orderBy")==null?"no":request.getParameter("orderBy");
		String flag = request.getParameter("flag");
		String keyword = request.getParameter("keyword");
		String shopIdStr = request.getParameter("shopId");
		Integer shopId;
		List<ShopGoods> shopGoodsList = new ArrayList<ShopGoods>();
		if (StringUtils.isBlank(shopIdStr)) {
			shopId=null;
		}else {
			shopId=Integer.parseInt(shopIdStr);
			shopGoodsList = shopGoodsService.selectByShopIdOrGoodsId(shopId, null, (short) 1);
		}
		List<Integer> catalogIdList = new ArrayList<Integer>();
		String catalogId = request.getParameter("catalogId");
		Short goodsType = null;
		if (StringUtils.isNotBlank(catalogId)) {
			B_Catalog catalog = catalogService.selectByPrimaryKey(Integer.parseInt(catalogId));
			catalog.setImgUrl(ASSET_URL+catalog.getImgUrl());
			catalog.setImgUrl1(ASSET_URL+catalog.getImgUrl1());
			listMap.put("catalog", catalog);
			if (catalog.getCatalogLev()==2) {
				catalogIdList.add(catalog.getId());
			}else {
				List<B_Catalog> catalogs = catalogService.selectByParentId(catalog.getId(), null);
				for (Iterator iterator = catalogs.iterator(); iterator.hasNext();) {
					B_Catalog b_Catalog = (B_Catalog) iterator.next();
					catalogIdList.add(b_Catalog.getId());
				}
			}
		}
		String goodsTypes = request.getParameter("goodsTypes");
		if (StringUtils.isNotBlank(goodsTypes)) {
			goodsType = Short.parseShort(goodsTypes);
		}
		List<B_Goods> typeGoodsList = goodsService.getGoodsByKeywordListPage(flag,keyword, orderBy, page, CommonParam.GOODS_STATUS_UP,goodsType,shopId,catalogIdList,shopGoodsList);
		for(B_Goods goods:typeGoodsList){
			List<B_Goods_Ext> extList = extService.selectByGoods_id(goods.getId());
			goods.setGoodsExts(extList);
			goods.setHeadImgUrl(ASSET_URL+goods.getHeadImgUrl());
		}
		int totalCount = page.getTotalResult();
		int lastPage=0;
		if (totalCount % pageSize==0){
			lastPage = totalCount / pageSize;
		}
		else{
			lastPage =1+ totalCount / pageSize;
		}
		if (currentPage>=lastPage){
			currentPage =lastPage;
		}
		page.setTotalPage(lastPage);
		page.setCurrentPage(currentPage);
		listMap.put("page", page);
		listMap.put("list", typeGoodsList);
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("getGoodsById")
	public Map<String, Object> getGoodsById(HttpServletRequest request,HttpServletResponse response) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		int goods_id = request.getParameter("goodsId")==null?0:Integer.parseInt(request.getParameter("goodsId"));
		B_Goods goods = goodsService.selectByPrimaryKey(goods_id);
		if (goods!=null) {
			String shopId = request.getParameter("shopId");
			B_Shop shop = new B_Shop();
			if (StringUtils.isNotBlank(shopId)) {
				shop = userService.selectShopByPrimaryKey(Integer.parseInt(shopId));
			}else {
				shop = userService.selectShopByPrimaryKey(goods.getShopId());
			}
			listMap.put("shop", shop);
			if (goods.getStatus()!=1) {
				state = "201";
				msg = "该商品已下架或已删除";
			}else {
				goods.setClickCount(goods.getClickCount()+1);
				goodsService.updateByPrimaryKey(goods);
				String path = request.getContextPath();
				String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";
				goods.setContent(basePath+"app/goodsContent?goodsId="+goods_id);
				String userId = request.getParameter("userId");
				listMap.put("goods", goods);
				if (StringUtils.isNotBlank(userId)) {
					B_User user =userService.selectByPrimaryKey(Integer.parseInt(userId));
					if (user!=null&&!"".equals(user)) {
						B_Goods_Store store = storeService.selectInStore(user.getId(), goods.getId(),(short) 1);
						if (store!=null) {
							listMap.put("isStored", 1);
							listMap.put("storeIds", store.getId());
						}else {
							listMap.put("isStored", 0);
						}
					}
				}
				//banner图
				List<B_Goods_Img> imgList = imgService.selectByGoods_id(goods_id,(short) 1);
				for (Iterator iterator = imgList.iterator(); iterator.hasNext();) {
					B_Goods_Img b_Goods_Img = (B_Goods_Img) iterator.next();
					b_Goods_Img.setImgUrl(ASSET_URL+b_Goods_Img.getImgUrl());
				}
				listMap.put("imgList", imgList);
				//规格
				List<B_Spec> specList = specService.selectByGoodsId(goods_id);
				if (goods.getGoodsType()==6) {
					for (Iterator iterator = specList.iterator(); iterator.hasNext();) {
						B_Spec b_Spec = (B_Spec) iterator.next();
						Double price = b_Spec.getPrice()*goods.getDiscount();
						DecimalFormat format = new DecimalFormat("#");
						price = Double.parseDouble(format.format(price));
						b_Spec.setPrice(price);
					}
				}
				listMap.put("specList", specList);
				//拼单列表
				if (goods.getGoodsType()==CommonParam.GOODS_TYPE_PD) {
					List<Map> list = detailService.selectMergeCount(goods_id, CommonParam.ORDER_STATUS_PRESELLED);
					List<B_Merge> mergeList = new ArrayList<B_Merge>();
					if(list!=null && list.size()>0){
						for(Map map1 : list){
							String mergeNum = map1.get("mergeNum").toString();
							if(StringUtils.isNotBlank(mergeNum)){
								int count =  Integer.parseInt(map1.get("count").toString());
								if (goods.getMergeNum()!=count) {
									List<B_Order> orders = orderService.selectByMergeNum(mergeNum, null);
									B_Order order = orders.get(0);
									B_User user = userService.selectByPrimaryKey(order.getBuyUserId());
									B_Merge merge = new B_Merge();
									merge.setNum(goods.getMergeNum()-count);
									Date beginTime = DateUtils.stringToDate(order.getCreateTime());
									Date endTime = DateUtils.getAddDaysTime(beginTime,1);
									merge.setRemainTime(DateUtils.getTimeLong(endTime)-DateUtils.getTimeLong(new Date()));
									merge.setMergeNum(mergeNum);
									merge.setEngTime(DateUtils.getTimeLong(endTime));
									merge.setUserName(user.getNickName());
									merge.setHeadImg(ASSET_URL+user.getHeadImgUrl());
									mergeList.add(merge);
								}
							}
						}
					}
					listMap.put("mergeList", mergeList);
				}
			}
	  }else {
		state="210";
		msg="未找到商品";
	  }		
	  map.put("data", listMap);
	  map.put("state", state);
	  map.put("msg", msg);
	  return map;	
	}
	@RequestMapping("goodsContent")
	public String goodsContent(HttpServletRequest request,String goodsId){
		B_Goods goods = goodsService.selectByPrimaryKey(Integer.parseInt(goodsId));
		List<B_Goods_Ext> extList = extService.selectByGoods_id(goods.getId());
		List<B_Goods_Reply> replyList = replyService.selectByGoods_id(goods.getId(), null,null);
		for (Iterator iterator = replyList.iterator(); iterator.hasNext();) {
			B_Goods_Reply b_Goods_Reply = (B_Goods_Reply) iterator.next();
			B_Spec spec = specService.selectByPrimaryKey(b_Goods_Reply.getSpecId());
			b_Goods_Reply.setSpec(spec);
			B_User replyer = userService.selectByPrimaryKey(b_Goods_Reply.getUserId());
			b_Goods_Reply.setUser(replyer);
			b_Goods_Reply.setCreateTime(b_Goods_Reply.getCreateTime().substring(0, b_Goods_Reply.getCreateTime().length()-2));
		}
		request.setAttribute("goods", goods);
		request.setAttribute("extList", extList);
		request.setAttribute("replyList", replyList);
		request.setAttribute("ASSET_URL", ASSET_URL);
		return "goods/appGoodsDetail";
	}
	@ResponseBody
	@RequestMapping("shopDetail")
	public Map<String, Object> shopDetail(HttpServletRequest request,String shopId,String userId){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if (StringUtils.isNotBlank(shopId)) {
			B_Shop shop = userService.selectShopByPrimaryKey(Integer.parseInt(shopId));
			if (shop!=null) {
				shop.setCardUrl1(ASSET_URL+shop.getCardUrl1());
				shop.setCardUrl2(ASSET_URL+shop.getCardUrl2());
				shop.setLogoUrl(ASSET_URL+shop.getLogoUrl());
				listMap.put("shop", shop);
				if (StringUtils.isNotBlank(userId)) {
					B_Goods_Focus focus = goodsService.getISFocused(Integer.parseInt(userId), Integer.parseInt(shopId));
					if (focus!=null) {
						listMap.put("ISFocus", 1);
						listMap.put("focusId", focus.getId());
					}else {
						listMap.put("ISFocus", 0);
					}
				}
				List<ImgSet> bannerImgList = new ArrayList<ImgSet>();
//				List<B_Goods> goodsList = goodsService.selectByFlag(null,CommonParam.FLAG_SHOP,4,CommonParam.GOODS_STATUS_UP,CommonParam.GOODS_TYPE_NORMAL);
				List<B_Goods_Img> imgList = imgService.selectByGoods_id(Integer.parseInt(shopId) ,(short) 4);
				for (Iterator iterator = imgList.iterator(); iterator.hasNext();) {
					B_Goods_Img img1 = (B_Goods_Img) iterator.next();
					ImgSet img = new ImgSet();
					img.setId(img1.getId()+"");
					img.setImg(ASSET_URL+img1.getImgUrl());
					img.setType("goods");
					bannerImgList.add(img);
				}
				listMap.put("bannerImgList", bannerImgList);
			}else {
				state = "201";
				msg = "未获取数据";
			}
		}else {
			state = "500";
			msg = "缺少参数";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	//添加编辑
	@ResponseBody
	@RequestMapping("saveInCar")
	public Map<String, Object> saveInCar(HttpServletRequest request,String goodsId,String specId,String stock,String userId,String carId){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if (StringUtils.isNotBlank(carId)&&StringUtils.isNotBlank(stock)) {
			B_User_Car car = carService.selectByPrimaryKey(Integer.parseInt(carId));
			car.setStock(Integer.parseInt(stock));
			carService.updateByPrimaryKeySelective(car);
		}else if (StringUtils.isNotBlank(goodsId)&&StringUtils.isNotBlank(specId)&&StringUtils.isNotBlank(stock)&&StringUtils.isNotBlank(userId)) {
			B_Goods goods = goodsService.selectByPrimaryKey(Integer.parseInt(goodsId));
			B_Spec spec = specService.selectByPrimaryKey(Integer.parseInt(specId));
			if (goods!=null&&spec!=null) {
				B_User_Car car = new B_User_Car();
				car.setSpec(spec);
				car.setUserId(Integer.parseInt(userId));
				car.setGoods(goods);
				car.setStock(Integer.parseInt(stock));
				car.setShopId(goods.getShopId());
				car.setCreateTime(DateUtils.currtime());
				B_User_Car car1 = carService.selectInCars(car);
				if (car1==null||"".equals(car1)) {
					carService.insertSelective(car);
				}else {
					car1.setStock(Integer.parseInt(stock)+car1.getStock());
					carService.updateByPrimaryKeySelective(car1);
				}
			}else {
				state = "210";
				msg = "参数不正确";
			}
			
		}else {
			state = "500";
			msg = "缺少参数";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("myCar")
	public Map<String, Object> myCar(HttpServletRequest request,String userId){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if (StringUtils.isNotBlank(userId)) {
			List<Integer> shopIdList = carService.selectShopIdByUserId(Integer.parseInt(userId));
			List<ListMap> list = new ArrayList<ListMap>();
			int i =1;
			for (Iterator iterator = shopIdList.iterator(); iterator.hasNext();) {
				Integer shopId = (Integer) iterator.next();
				ListMap map1 = new ListMap();
				B_Shop shop = userService.selectShopByPrimaryKey(shopId);
				List<B_User_Car> carList = carService.selectByUserIdAndShopId(Integer.parseInt(userId),shopId);
				if(carList.size()>0){
					for(B_User_Car car : carList){
						B_Goods goods = goodsService.selectByPrimaryKey(car.getGoods().getId());
						goods.setHeadImgUrl(ASSET_URL+goods.getHeadImgUrl());
						car.setGoods(goods);
					}
				}
				map1.setId(shopId);
				map1.setName(shop.getName());
				map1.setDateList(carList);
				list.add(map1);
			}
			listMap.put("list", list);
		}else {
			state = "500";
			msg = "缺少参数";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("delCar")
	public Map<String, Object> delCar(HttpServletRequest request,String carId){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		if (StringUtils.isNotBlank(carId)) {
			carService.deleteByPrimaryKey(Integer.parseInt(carId));
		}else {
			state = "500";
			msg = "缺少参数";
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("createOrder")
	public Map<String, Object> createOrder(HttpServletRequest request,String shopId,String userId,String goodsId,String specId,String stock){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
			try {
				String signs = request.getParameter("signs");
				String mergeNum = request.getParameter("mergeNum");
				Short sign = 1;
				List<B_User_Addr> addrList = addrService.selectByUser_Id(Integer.parseInt(userId), (short) 1);
				String order_time = DateUtils.currtimeToString12();
				String strRandom = TenpayUtil.buildRandom(6) + "";
				String out_order_no= order_time+strRandom;
				B_Goods goods = goodsService.selectByPrimaryKey(Integer.parseInt(goodsId));
				Double postPrice = 0.0;
				if (goods.getPostPrice()!=null) {
					postPrice = goods.getPostPrice()*Integer.parseInt(stock);
				}
				B_Spec spec = specService.selectByPrimaryKey(Integer.parseInt(specId));
				if (spec.getStock()<Integer.parseInt(stock)) {
					state = "201";
					msg = "库存不足";
				}else {
					if (StringUtils.isNotBlank(signs)) {
						sign = Short.parseShort(signs);
					}
					spec.setStock(spec.getStock()-Integer.parseInt(stock));
					specService.updateByPrimaryKeySelective(spec);
					Double price = 0.0;
					if (sign==1) {
						if (goods.getGoodsType()==CommonParam.GOODS_TYPE_SALE) {
							price = spec.getPrice()*goods.getDiscount();
							DecimalFormat format = new DecimalFormat("#");
							price = Double.parseDouble(format.format(price));
						}else {
							price = spec.getPrice();
						}
					}else if (sign==2) {
						if (goods.getGoodsType()==CommonParam.GOODS_TYPE_PD) {
							price = spec.getPrice()*goods.getDiscount();
							DecimalFormat format = new DecimalFormat("#");
							price = Double.parseDouble(format.format(price));
							if (StringUtils.isBlank(mergeNum)) {
								mergeNum =  DateUtils.currtimeToString12()+userId;
							}else {
								List<B_Order> orders = orderService.selectByMergeNum(mergeNum,null);
								for (Iterator iterator = orders.iterator(); iterator.hasNext();) {
									B_Order b_Order = (B_Order) iterator.next();
									if ((b_Order.getBuyUserId()+"").equals(userId)) {
										map.put("data", listMap);
										map.put("state", "210");
										map.put("msg", "请勿重复拼单");
										return map;
									}
								}
								List<B_Order> orderList = orderService.selectByMergeNum(mergeNum,CommonParam.ORDER_STATUS_NOEMS);
								if (orderList.size()>0) {
									map.put("data", listMap);
									map.put("state", "220");
									map.put("msg", "该单人数已满，请拼其他的单！");
									return map;
								}
							}
						}else {
							price = spec.getPrice();
						}
					}else {
						price = spec.getPrice();
					}
					B_Order_Detail order_Detail = new B_Order_Detail();
					goods.setHeadImgUrl(ASSET_URL+goods.getHeadImgUrl());
					order_Detail.setGoods(goods);
					order_Detail.setOrderNum(out_order_no);
					order_Detail.setPriceSource(price);
					order_Detail.setPrice(price);
					order_Detail.setSpecId(spec.getId());
					order_Detail.setStock(Integer.parseInt(stock));
					order_Detail.setStatus(CommonParam.ORDER_STATUS_NO);
					order_Detail.setGoodsId(goods.getId());
					order_Detail.setGoodsName(goods.getName());
					order_Detail.setSign((short) 1);
					order_Detail.setPrePayment(0d);
					order_Detail.setMergeNum(mergeNum);
					order_Detail.setShopId(Integer.parseInt(shopId));
					order_Detail.setPostPrice(postPrice);
					order_Detail.setCheckRed((short) 0);
					order_Detail.setTotalPrice(price*Integer.parseInt(stock)+postPrice);
					detailService.insert(order_Detail);
					B_Order order = new B_Order();
					order.setBuyUserId(Integer.parseInt(userId));
					order.setCreateTime(DateUtils.currtime());
					order.setChange_time(DateUtils.currtime());
					order.setOrderNum(out_order_no);
					order.setStatus(CommonParam.ORDER_STATUS_NO);
					order.setSellUserId(goods.getPublisherId());
					order.setPayWay((short) 1);
					Double totalPrice = price*Integer.parseInt(stock)+postPrice;
					order.setTotalPrice(totalPrice);
					order.setTotalStock(Integer.parseInt(stock));
					order.setSign((short) 1);
					order.setShopId(goods.getShopId());
					order.setAssessed((short) 0);
					order.setMergeNum(mergeNum);
					order.setPrePayment(0d);
					if (addrList.size()>0) {
						order.setAddrId(addrList.get(0).getId());
						order.setAddr(addrList.get(0));
					}
					orderService.insert(order);
					
					B_Shop shop = userService.selectShopByPrimaryKey(goods.getShopId());
					order.setShop(shop);
					List<B_Order_Detail> detailList = new ArrayList<B_Order_Detail>();
					order_Detail.setSpec(spec);
					detailList.add(order_Detail);
					order.setDetailList(detailList);
					List<B_Order> orderList = new ArrayList<B_Order>();
					orderList.add(order);
					listMap.put("orderList", orderList);
					listMap.put("totalPrice", totalPrice);
				}
			} catch (Exception e) {
				state = "500";
				msg = "服务器错误";
				// TODO: handle exception
			}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/createCarOrder")
	public Map<String, Object> createCarOrder(HttpServletRequest request,String carIds,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			List<B_User_Addr> addrList = addrService.selectByUser_Id(Integer.parseInt(userId), (short) 1);
			String[] ListId = carIds.split(",");
			HttpSession session = request.getSession();
			session.setAttribute("ListId", ListId);
			List<B_User_Car> carList = carService.selectByListId(ListId);
			Map<Integer, List<B_User_Car>> carmap = new HashMap<Integer, List<B_User_Car>>();
			for (B_User_Car b_User_Car : carList) {
				Integer seller_id = b_User_Car.getGoods().getPublisherId();
				if (!carmap.containsKey(seller_id)) {
					List<B_User_Car> list = new ArrayList<B_User_Car>();
					list.add(b_User_Car);
					carmap.put(seller_id, list);
				}else {
					carmap.get(seller_id).add(b_User_Car);
				}
			}
			List<B_Order> orderList = new ArrayList<B_Order>();
			List<B_Order_Detail> detailList = new ArrayList<B_Order_Detail>();
			Double totalPrice = 0.0;
			for (Map.Entry<Integer, List<B_User_Car>> entry:carmap.entrySet()) {
				String order_time = DateUtils.currtimeToString12();
				String strRandom = TenpayUtil.buildRandom(6) + "";
				String out_order_no= order_time+strRandom;
				List<B_User_Car> cars = entry.getValue();
				double price= 0 ;
				int stock=0;
				boolean flag = false;
				for (Iterator iterator = cars.iterator(); iterator.hasNext();) {
					B_User_Car b_User_Car = (B_User_Car) iterator.next();
					B_Goods goods = goodsService.selectByPrimaryKey(b_User_Car.getGoods().getId());
					
					B_Spec spec = b_User_Car.getSpec();
					if (spec.getStock()<b_User_Car.getStock()) {
						state = "201";
						msg = goods.getName()+"库存不足";
					}else {
						spec.setStock(spec.getStock()-b_User_Car.getStock());
						specService.updateByPrimaryKeySelective(spec);
						goods.setHeadImgUrl(ASSET_URL+goods.getHeadImgUrl());
						Double postPrice = 0.0;
						if (goods.getPostPrice()!=null) {
							postPrice = goods.getPostPrice()*b_User_Car.getStock();
						}
						B_Order_Detail order_Detail = new B_Order_Detail();
						order_Detail.setGoods(goods);
						order_Detail.setGoodsId(goods.getId());
						order_Detail.setGoodsName(goods.getName());
						order_Detail.setOrderNum(out_order_no);
						//折前价
						order_Detail.setPriceSource(b_User_Car.getSpec().getPrice());
						//计算折后价
						double curPrice=0.0;
						if (goods.getGoodsType()==CommonParam.GOODS_TYPE_SALE) {
							DecimalFormat format = new DecimalFormat("#");
							curPrice = b_User_Car.getSpec().getPrice()*goods.getDiscount();
							curPrice = Double.parseDouble(format.format(curPrice));
						}else {
							curPrice = b_User_Car.getSpec().getPrice();
						}
						order_Detail.setPostPrice(postPrice);
						order_Detail.setPrice(curPrice);
						order_Detail.setSpecId(b_User_Car.getSpec().getId());
						order_Detail.setStock(b_User_Car.getStock());
						order_Detail.setStatus(CommonParam.ORDER_STATUS_NO);
						order_Detail.setSign((short) 1);
						order_Detail.setShopId(b_User_Car.getShopId());
						order_Detail.setPrePayment(0d);
						order_Detail.setCheckRed((short) 0);
						order_Detail.setTotalPrice(curPrice*b_User_Car.getStock()+postPrice);
						detailService.insert(order_Detail);
						order_Detail.setSpec(spec);
						detailList.add(order_Detail);
						stock+=b_User_Car.getStock();
						price+=(curPrice*b_User_Car.getStock()+postPrice);
						flag=true;
						carService.deleteByPrimaryKey(b_User_Car.getId());
					}
				}
				if (flag) {
					B_Order order = new B_Order();
					order.setBuyUserId(Integer.parseInt(userId));
					order.setCreateTime(DateUtils.currtime());
					order.setChange_time(DateUtils.currtime());
					order.setOrderNum(out_order_no);
					order.setStatus(CommonParam.ORDER_STATUS_NO);
					order.setSellUserId(entry.getKey());
					order.setTotalPrice(price);
					order.setTotalStock(stock);
					order.setPayWay((short) 1);
					order.setAssessed((short) 0);
					order.setPrePayment(0d);
					B_Shop shop = userService.selectByUserId(entry.getKey(), 1);
					order.setShopId(shop.getId());
					order.setSign((short) 1);
					if (addrList.size()!=0) {
						B_User_Addr addr = addrList.get(0);
						order.setAddrId(addr.getId());
						order.setAddr(addrList.get(0));
					}
					orderService.insert(order);
					order.setShop(shop);
					order.setDetailList(detailList);
					orderList.add(order);
					totalPrice+=price;
				}
			}
			listMap.put("orderList", orderList);
			listMap.put("totalPrice", totalPrice);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
//	@ResponseBody
//	@RequestMapping("/payOfOrder")
//	public Map<String, Object> payOfOrder(HttpServletRequest request) throws Exception{
//		HashMap<String, Object> map = new HashMap<String,Object>();
//		HashMap<String, Object> listMap = new HashMap<String,Object>();
//		String state = "200";
//		String msg = "ok";
//		try {
//			String orderIds = request.getParameter("orderIds");
//			List<B_Order> orderList = new ArrayList<B_Order>();
//			Double totalPrice = 0.0;
//			String[] ids = orderIds.split(",");
//			for (int i = 0; i < ids.length; i++) {
//				B_Order order = orderService.selectByPrimaryKey(Integer.parseInt(ids[i]));
//				order = orderService.getOrderByOrderNum(order.getOrderNum());
//				List<B_Order_Detail> details = order.getDetailList();
//				for (Iterator iterator = details.iterator(); iterator.hasNext();) {
//					B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
//					B_Goods goods = goodsService.selectByPrimaryKey(b_Order_Detail.getGoods().getId());
//					goods.setHeadImgUrl(ASSET_URL+goods.getHeadImgUrl());
//					if (b_Order_Detail.getSpecId()!=null) {
//						B_Spec spec = specService.selectByPrimaryKey(b_Order_Detail.getSpecId());
//						b_Order_Detail.setSpec(spec);
//					}
//				}
//				order.setDetailList(details);
//				if (order.getAddrId()==null) {
//					List<B_User_Addr> addrList = addrService.selectByUser_Id(order.getBuyUserId(), (short) 1);
//					if (addrList.size()>0) {
//						order.setAddr(addrList.get(0));
//					}
//				}else {
//					B_User_Addr addr = addrService.selectByPrimaryKey(order.getAddrId());
//					order.setAddr(addr);
//				}
//				B_Shop shop = userService.selectShopByPrimaryKey(order.getShopId());
//				order.setShop(shop);
//				orderList.add(order);
//				totalPrice+=order.getTotalPrice();
//			}
//			listMap.put("orderList", orderList);
//			listMap.put("totalPrice", totalPrice);
//		} catch (Exception e) {
//			state = "500";
//			msg = "服务器错误";
//			// TODO: handle exception
//		}
//		map.put("data", listMap);
//		map.put("state", state);
//		map.put("msg", msg);
//		return map;
//	}
	@ResponseBody
	@RequestMapping("orderListPage")
	public Map<String, Object> orderListPage(HttpServletRequest request,String buyerIds,String status,String sellerIds,String orderSign,String orderPayWay){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			int currentPage = request.getParameter("pages")==null?1:Integer.parseInt(request.getParameter("pages"));
			int pageSize = 10;
			if (currentPage<=0){
				currentPage =1;
			}
			int currentResult = (currentPage-1) * pageSize;
			PageInfo page = new PageInfo();
			page.setShowCount(pageSize);
			page.setCurrentResult(currentResult);
			Short status_d=null;
			if (StringUtils.isNotBlank(status)) {
				status_d = Short.parseShort(status);
			}
			
			Integer buyerId = null;
			if (StringUtils.isNotBlank(buyerIds)) {
				buyerId = Integer.parseInt(buyerIds);
			}
			Integer sellerId = null;
			if (StringUtils.isNotBlank(sellerIds)) {
				sellerId = Integer.parseInt(sellerIds);
			}
			Short sign = null;
			if (StringUtils.isNotBlank(orderSign)) {
				sign = Short.valueOf(orderSign);
			}
			Short payWay = null;
			if (StringUtils.isNotBlank(orderPayWay)) {
				payWay = Short.valueOf(orderPayWay);
			}
			List<B_Order> orderList = orderService.selectByStatusOrUserListPage(page,buyerId,sellerId, status_d,payWay,null,sign,null);
			for (Iterator iterator = orderList.iterator(); iterator.hasNext();) {
				B_Order order = (B_Order) iterator.next();
				B_Order_Track track = detailService.selectByOrderNum(order.getOrderNum());
				if (track!=null) {
					order.setEmsCode(track.getEmsCode());
					order.setEmsType(track.getEmsType());
				}
				B_Shop shop = userService.selectShopByPrimaryKey(order.getShopId());
				order.setShop(shop);
				order.setCodeUrl(ASSET_URL+order.getCodeUrl());
				order.setCreateTime(order.getCreateTime().substring(0, order.getCreateTime().length()-2));
				List<B_Order_Detail> detailList = order.getDetailList();
				for (Iterator iterator2 = detailList.iterator(); iterator2.hasNext();) {
					B_Order_Detail detail = (B_Order_Detail) iterator2.next();
					B_Goods goods = detail.getGoods();
					if (goods.getHeadImgUrl()!=null) {
						goods.setHeadImgUrl(ASSET_URL+goods.getHeadImgUrl());
						detail.setGoods(goods);
					}
					if (detail.getSpecId()!=null) {
						B_Spec spec = specService.selectByPrimaryKey(detail.getSpecId());
						detail.setSpec(spec);
					}
				}
				if (order.getAddrId()!=null) {
					B_User_Addr addr = addrService.selectByPrimaryKey(order.getAddrId());
					order.setAddr(addr);
				}
			}
			int totalCount = page.getTotalResult();
			int lastPage=0;
			if (totalCount % pageSize==0){
				lastPage = totalCount / pageSize;
			}
			else{
				lastPage =1+ totalCount / pageSize;
			}
			if (currentPage>=lastPage){
				currentPage =lastPage;
			}
			page.setTotalPage(lastPage);
			page.setCurrentPage(currentPage);
			listMap.put("page", page);
			listMap.put("orderList", orderList);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/orderDetail")
	public Map<String, Object> orderDetail(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			String orderNum = request.getParameter("orderNum");
			B_Order	order = orderService.getOrderByOrderNum(orderNum);
			if (order.getSign()==4) {
				B_User buyer = userService.selectByPrimaryKey(order.getBuyUserId());
				B_User_Addr addr = new B_User_Addr();
				addr.setPhone(buyer.getPhone());
				order.setAddr(addr);
			}else {
				if (order.getAddrId()!=null) {
					B_User_Addr addr = addrService.selectByPrimaryKey(order.getAddrId());
					order.setAddr(addr);
				}
			}
			B_Shop shop = userService.selectShopByPrimaryKey(order.getShopId());
			order.setShop(shop);
			List<B_Order_Detail> detailList = order.getDetailList();
			for (Iterator iterator2 = detailList.iterator(); iterator2.hasNext();) {
				B_Order_Detail detail = (B_Order_Detail) iterator2.next();
				B_Goods goods = detail.getGoods();
				if (goods.getHeadImgUrl()!=null) {
					goods.setHeadImgUrl(ASSET_URL+goods.getHeadImgUrl());
					detail.setGoods(goods);
				}
				if (detail.getSpecId()!=null) {
					B_Spec spec = specService.selectByPrimaryKey(detail.getSpecId());
					detail.setSpec(spec);
				}
			}
			order.setCodeUrl(ASSET_URL+order.getCodeUrl());
			listMap.put("order", order);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}	
	@ResponseBody
	@RequestMapping("/checkPwd2")
	public Map<String, Object> checkPwd2(HttpServletRequest request,String pwd2,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_User user = userService.selectByPrimaryKey(Integer.parseInt(userId));
			if (!user.getPwd2().equals(MD5Code.md5_base64(pwd2))) {
				state = "201";
				msg = "二级密码错误";
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/cancelOrder")
	public Map<String, Object> cancelOrder(HttpServletRequest request,String orderNum) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_Order order = orderService.getOrderByOrderNum(orderNum);
			if (StringUtils.isNotBlank(order.getMergeNum())) {
				map.put("data", listMap);
				map.put("state", "210");
				map.put("msg", "拼单无法取消");
				return map;
			}
			if (order.getStatus()==CommonParam.ORDER_STATUS_NOEMS) {
				B_User buyer = userService.selectByPrimaryKey(order.getBuyUserId());
				if (order.getPayWay()==4) {
					buyer.setRechargeNum(buyer.getRechargeNum()+order.getTotalPrice()-order.getPrePayment());
					userService.updateRechargeNum(buyer);
					RedPacketRecord record3 = new RedPacketRecord();
					record3.setUserId(buyer.getId());
					record3.setGivemoney(order.getTotalPrice()-order.getPrePayment());
					record3.setRedNum(0);
					record3.setLooked((short) 0);
					record3.setOrderNum(orderNum);
					record3.setCreateTime(DateUtils.currtime());
					record3.setType((short) 27);
					redPacketService.insertSelective(record3);
				}else {
					buyer.setBalance(buyer.getBalance()+order.getTotalPrice()-order.getPrePayment());
					userService.updateBalance(buyer);
					RedPacketRecord record3 = new RedPacketRecord();
					record3.setUserId(buyer.getId());
					record3.setGivemoney(order.getTotalPrice()-order.getPrePayment());
					record3.setRedNum(0);
					record3.setLooked((short) 0);
					record3.setOrderNum(orderNum);
					record3.setCreateTime(DateUtils.currtime());
					record3.setType((short) 20);
					redPacketService.insertSelective(record3);
				}
			}
			order.setStatus(CommonParam.ORDER_STATUS_CANCEL);
			orderService.updateByPrimaryKeySelective(order);
			List<B_Order_Detail> detailList = detailService.selectByorderNum(orderNum);
			for (Iterator iterator = detailList.iterator(); iterator.hasNext();) {
				B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
				b_Order_Detail.setStatus(CommonParam.ORDER_STATUS_CANCEL);
				detailService.updateByPrimaryKey(b_Order_Detail);
				if (b_Order_Detail.getSpecId()!=null) {
					B_Spec spec = specService.selectByPrimaryKey(b_Order_Detail.getSpecId());
					if (spec!=null) {
						spec.setStock(spec.getStock()+b_Order_Detail.getStock());
						specService.updateByPrimaryKeySelective(spec);
					}
				}
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/completeOrder")
	public Map<String, Object> completeOrder(HttpServletRequest request,String orderNum) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			List<B_Order_Detail> detailList = detailService.selectByorderNum(orderNum);
			for (Iterator iterator = detailList.iterator(); iterator.hasNext();) {
				B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
				b_Order_Detail.setStatus(CommonParam.ORDER_STATUS_SUCCESS);
				detailService.updateByPrimaryKey(b_Order_Detail);
			}
			B_Order order = orderService.getOrderByOrderNum(orderNum);
			order.setReceiveTime(DateUtils.currtime());
			order.setStatus(CommonParam.ORDER_STATUS_SUCCESS);
			orderService.updateByPrimaryKeySelective(order);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/replyOrder")
	public Map<String, Object> replyOrder(HttpServletRequest request,String orderNum,String replyList) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_Order order = orderService.getOrderByOrderNum(orderNum);
			JSONArray jsonArray = JSONArray.fromObject(replyList);
	        for (int i = 0; i < jsonArray.size(); i++) {
	        	JSONObject jsonObject = jsonArray.getJSONObject(i);
	            B_Goods_Reply reply = (B_Goods_Reply) JSONObject.toBean(jsonObject, B_Goods_Reply.class);
				B_Order_Detail detail = detailService.selectById(reply.getDetailId());
				if (detail.getSpecId()!=null) {
					reply.setSpecId(detail.getSpecId());
				}
				reply.setNickFlag((short) 0);
				reply.setBuyTime(order.getCreateTime());
				reply.setCreateTime(DateUtils.currtime());
				replyService.insert(reply);
//				detail.setAssessed((short) 1);
				detail.setStatus(CommonParam.ORDER_STATUS_REPLYED);
				detailService.updateByPrimaryKey(detail);
	        }
			order.setStatus(CommonParam.ORDER_STATUS_REPLYED);
			orderService.updateByPrimaryKeySelective(order);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/returnsOrder")
	public Map<String, Object> returnsOrder(HttpServletRequest request,String orderNum,String returns) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			JSONObject jsonObject = JSONObject.fromObject(returns);
			B_Return re = (B_Return) JSONObject.toBean(jsonObject,B_Return.class);
			B_Order order = orderService.getOrderByOrderNum(orderNum);
//			if (order.getSign()==4&&order.getPayWay()==2) {
//				map.put("data", listMap);
//				map.put("state", "210");
//				map.put("msg", "线下报单不允许线上退换");
//				return map;
//			}
			if (order.getStatus()==4||order.getStatus()==5) {
				map.put("data", listMap);
				map.put("state", "220");
				map.put("msg", "该订单正在退换或已完成，请勿重复提交！");
				return map;
			}
			re.setOrderNum(orderNum);
			re.setCreateTime(DateUtils.currtime());
			re.setSellerUserId(order.getSellUserId());
			re.setBuyUserId(order.getBuyUserId());
			if (re.getType()==0) {
				if (order.getStatus()==CommonParam.ORDER_STATUS_NOEMS) {
					re.setStatus(CommonParam.RETURN_STATUS_POST);
				}else {
					re.setStatus(CommonParam.RETURN_STATUS_ING);
				}
			}else {
				re.setStatus(CommonParam.RETURN_STATUS_ING);
			}
			
			returnService.insert(re);
			
			order.setcId(order.getStatus());
			order.setStatus(CommonParam.ORDER_STATUS_RECH);
			orderService.updateByPrimaryKeySelective(order);
			List<B_Order_Detail> details = detailService.selectByorderNum(orderNum);
			for (Iterator iterator = details.iterator(); iterator.hasNext();) {
				B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
				b_Order_Detail.setStatus(CommonParam.ORDER_STATUS_RECH);
				detailService.updateByPrimaryKey(b_Order_Detail);
			}
			
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	//退换买家填写物流信息
	@ResponseBody
	@RequestMapping("/saveEMS")
	public Map<String, Object> saveEMS(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			Integer id = Integer.parseInt(request.getParameter("returnId"));
			String EMS = request.getParameter("EMS");
			String emscode = request.getParameter("emscode");
			String type = request.getParameter("type");
			B_Return retrn = returnService.selectByPrimaryKey(id);
			if (type.equals("buyEms")) {
				retrn.setBuyerEmsCode(emscode);
				retrn.setBuyerEms(EMS);
				retrn.setStatus(CommonParam.RETURN_STATUS_POST);
			}else if (type.equals("sellEms")) {
				retrn.setSellerEmsCode(emscode);
				retrn.setSellerEms(EMS);
				retrn.setStatus(CommonParam.RETURN_STATUS_RECEIVE);
			}
			returnService.updateByPrimaryKeySelective(retrn);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/updateReturn")
	public Map<String, Object> updateReturn(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			Short status = Short.parseShort(request.getParameter("status"));
			String orderNum = request.getParameter("orderNum");
			B_Return return1 = returnService.selectByOrderNum(orderNum);
			return1.setStatus(status);
			returnService.updateByPrimaryKeySelective(return1);
			if (status==2) {
				Short orderStatus = CommonParam.ORDER_STATUS_FALSE;
				B_Order order = orderService.selectByorderNum(orderNum);
				if (order.getStatus()==CommonParam.ORDER_STATUS_RECH) {
					order.setStatus(orderStatus);
					List<B_Order_Detail> details = detailService.selectByorderNum(orderNum);
					for (Iterator iterator = details.iterator(); iterator.hasNext();) {
						B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
						b_Order_Detail.setStatus(orderStatus);
						detailService.updateByPrimaryKey(b_Order_Detail);
					}
					orderService.updateByPrimaryKeySelective(order);
					orderService.dealChOrder(orderNum);
				}
			}else if (status==6) {
				B_Order order = orderService.selectByorderNum(orderNum);
				order.setStatus(order.getcId());
				orderService.updateByPrimaryKeySelective(order);
				List<B_Order_Detail> details = detailService.selectByorderNum(orderNum);
				for (Iterator iterator = details.iterator(); iterator.hasNext();) {
					B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
					b_Order_Detail.setStatus(order.getcId());
					detailService.updateByPrimaryKey(b_Order_Detail);
				}
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	//states=priceCUTorderId_orderId
	@ResponseBody
	@RequestMapping("/payOrder")
	public Map<String, Object> payOrder(HttpServletRequest request) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		Map<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			String type = request.getParameter("type");
			String userId = request.getParameter("userId");
			Short payWay = Short.parseShort(request.getParameter("payWay"));
			if (type.equals("buy")) {
				//ids:id_id
				B_User user = userService.selectByPrimaryKey(Integer.parseInt(userId));
				String addrId = request.getParameter("addrId");
				String orderIds = request.getParameter("orderIds");
				String voucherIds = request.getParameter("voucherIds");
				String flag = request.getParameter("flag");//0：不使用消费金；1：使用无条件消费金；2：使用到店消费金
				Map<String, Object> map1 = orderService.dealOrder(orderIds, flag);
				List<B_Order> orderList = (List<B_Order>) map1.get("orderList");
				Double totalPrice = Double.parseDouble(map1.get("totalPrice").toString());
				Double prePayment = Double.parseDouble(map1.get("prePayment").toString());
				List<B_User_Voucher> userVoucherList = (List<B_User_Voucher>) map1.get("userVoucherList");
				System.out.println("totalPrice====="+totalPrice);
				if (payWay==3) {
					if (user.getBalance()<totalPrice) {
						map.put("data", listMap);
						map.put("state", "210");
						map.put("msg", "余额不足!!");
						return map;
					}
					for (Iterator iterator = orderList.iterator(); iterator.hasNext();) {
						B_Order order = (B_Order) iterator.next();
						if (order.getStatus()!=CommonParam.ORDER_STATUS_NO) {
							map.put("data", listMap);
							map.put("state", state);
							map.put("msg", "该订单已被支付或取消");
							return map;
						}
						Short status = CommonParam.ORDER_STATUS_NOEMS;
						List<B_Order_Detail> details = detailService.selectByorderNum(order.getOrderNum());
						for (Iterator iterator1 = details.iterator(); iterator1.hasNext();) {
							B_Order_Detail detail = (B_Order_Detail) iterator1.next();
							detail.setStatus(status);
							detailService.updateByPrimaryKey(detail);
							if (payWay!=1&&payWay!=5) {
								if (detail.getGoodsId()!=null) {
									B_Goods goods = goodsService.selectByPrimaryKey(detail.getGoodsId());
									if (goods.getGoodsType()!=5) {
										goods.setSellCount(goods.getSellCount()+detail.getStock());
										goodsService.updateByPrimaryKey(goods);
									}
								}
							}
						}
						order.setPayWay(payWay);
						if (StringUtils.isNotBlank(addrId)) {
							order.setAddrId(Integer.parseInt(addrId));
						}
						order.setStatus(status);
						orderService.updateByPrimaryKeySelective(order);
						RedPacketRecord record = new RedPacketRecord();
						record.setCreateTime(DateUtils.currtime());
						record.setGivemoney(order.getTotalPrice()-order.getPrePayment());
						record.setOrderNum(order.getOrderNum());
						record.setRedNum(0);
						record.setUserId(order.getBuyUserId());
						record.setType((short)2);
						redPacketService.insertSelective(record);
						
						user.setBalance(user.getBalance()-order.getTotalPrice()+order.getPrePayment());
						userService.updateBalance(user);
					}
				}else if (payWay==4) {
					if (user.getRechargeNum()<totalPrice) {
						map.put("data", listMap);
						map.put("state", "210");
						map.put("msg", "惠享分不足");
						return map;
					}
				}else if (payWay==1) {
					String ran = String.valueOf(System.currentTimeMillis());
					String orderNo = ran+"-"+orderIds;
					if (totalPrice>0) {
						String prices = totalPrice*100+"";
						listMap=WxPayUtil.doAppPay(prices, "订单支付", orderNo);
						map.put("data", listMap);
						map.put("state", state);
						map.put("msg", msg);
						return map;
					}
				}else if (payWay==5) {
					String ran = String.valueOf(System.currentTimeMillis());
					String orderNo = ran+"-"+orderIds+"V"+voucherIds;
					if (totalPrice>0) {
						String zfbResult = ZfbPayUtil.doAppPay(totalPrice+"", "订单支付", "买了就赚商品购买", orderNo);
						listMap.put("zfbResult", zfbResult);
						map.put("data", listMap);
						map.put("state", state);
						map.put("msg", msg);
						return map;
					}
				}
			}else if (type.equals("recharge")) {
				Double price = Double.valueOf(request.getParameter("totalPrice"));//充值金额
				String order_time = DateUtils.currtimeToString12();
				String strRandom = TenpayUtil.buildRandom(6) + "";
				String orderNum= "CZ"+order_time+strRandom;
				String prices="";
				if (price>0) {
					prices = price*100+"";
				}
				if (payWay==1) {
					listMap=WxPayUtil.doAppPay(prices, "余额充值", orderNum);
				}else if (payWay==5) {
					String zfbResult = ZfbPayUtil.doAppPay(price+"", "余额充值", "人人惠享余额充值", orderNum);
					listMap.put("zfbResult", zfbResult);
				}
				Recharge recharge = new Recharge();
				BigDecimal b1 = new BigDecimal(price);
//		        BigDecimal b2 = new BigDecimal(100);
				recharge.setCoints(b1.doubleValue());
				recharge.setUserId(Integer.parseInt(userId));
				recharge.setStatus((short) 0);
				recharge.setCreateTime(DateUtils.currtime());
				recharge.setOrderNum(orderNum);
				rechargeService.insertSelective(recharge);
			}
			
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/addUserBalance")
	public Map<String, Object> addUserBalance(HttpServletRequest request,String orderIds,Integer userId){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			String[] ids = orderIds.split("_");
			for (int i = 0; i < ids.length; i++) {
				B_Order order = orderService.selectByPrimaryKey(Integer.parseInt((ids[i])));
				if (order.getStatus()==CommonParam.ORDER_STATUS_NO) {
					Short payWay = order.getPayWay();
					B_User user = userService.selectByPrimaryKey(userId);
					Double prePayment = 0.0;
					List<B_Order_Detail> details = detailService.selectByorderNum(order.getOrderNum());
					for (Iterator iterator = details.iterator(); iterator.hasNext();) {
						B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
						prePayment = prePayment+b_Order_Detail.getPrePayment();
					}
					if (payWay==3) {
						user.setBalance(user.getBalance()+prePayment);
						userService.updateBalance(user);
					}else if (payWay==4) {
						user.setRechargeNum(user.getRechargeNum()+prePayment);
						userService.updateRechargeNum(user);
					}
				}
			}
			
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/catalogList")
	public Map<String, Object> catalogList(HttpServletRequest request) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			List<B_Catalog> catalogList = catalogService.selectAllParent(null);
			List<ListMap> list = new ArrayList<ListMap>();
			for (Iterator iterator = catalogList.iterator(); iterator.hasNext();) {
				B_Catalog b_Catalog = (B_Catalog) iterator.next();
				List<B_Catalog> sonList = catalogService.selectByParentId(b_Catalog.getId(), null);
				for (Iterator iterator2 = sonList.iterator(); iterator2.hasNext();) {
					B_Catalog son = (B_Catalog) iterator2.next();
					son.setImgUrl(ASSET_URL+son.getImgUrl());
				}
				ListMap listMap2=new ListMap();
				listMap2.setId(b_Catalog.getId());
				listMap2.setName(b_Catalog.getName());
				listMap2.setDateList(sonList);
				list.add(listMap2);
			}
			listMap.put("catalogList", list);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/isSeller")
	public Map<String, Object> isSeller(HttpServletRequest request,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_Shop shop = userService.selectByUserId(Integer.parseInt(userId), null);
			if (shop!=null) {
				if (shop.getStatus()==0) {
					listMap.put("code", 0);//已申请,审核中
				}else if (shop.getStatus()==2) {
					listMap.put("code", 2);//审核未通过
				}else if (shop.getStatus()==1) {
					listMap.put("code", 1);//已是商家
				}
				listMap.put("shop", shop);
			}else {
				listMap.put("code", 4);//没有申请
			}
			
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/replyShop")
	public Map<String, Object> replyShop(HttpServletRequest request,String shops) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			System.out.println("replyShop:::::"+shops);
			JSONObject jsonObject = JSONObject.fromObject(shops);
			B_Shop shop = (B_Shop) JSONObject.toBean(jsonObject,B_Shop.class);
			B_User user = userService.selectByPrimaryKey(shop.getUserId());
			CheckCode ck = null;
			if(StringUtils.isNotBlank(shop.getPhone())){
				ck = this.userService.getCheckCode(shop.getPhone());
			}
			if(ck==null || !ck.getCheckCode().equals(shop.getCheckCode())){
				map.put("data", listMap);
				map.put("state", "210");
				map.put("msg", "验证码不正确！");
				return map;
			}
			if (!shop.getPhone().equals(user.getPhone())) {
				map.put("data", listMap);
				map.put("state", "220");
				map.put("msg", "手机号与本人不符");
				return map;
			}
			if (shop.getReferPhone()!=null&&!"".equals(shop.getReferPhone())){
				B_User refer = userService.selectByPhone(shop.getReferPhone());
				if (refer==null||"".equals(refer)||!refer.getUserRoleId().contains(CommonParam.USER_ROLE_SALER)||refer.getStatus()==1) {
					map.put("data", listMap);
					map.put("state", "230");
					map.put("msg", "未找到推荐人");
					return map;
				}
				if (refer.getId()==user.getId()) {
					map.put("data", listMap);
					map.put("state", "240");
					map.put("msg", "推荐人不能是自己");
					return map;
				}
				shop.setReferId(refer.getId());
			}
			user.setAddr(shop.getUserAddr().trim());
			userService.updatePhoneAndAddr(user);
//			if (shop.getFlag().equals("reply")) {//申请商家
//				B_User user = userService.selectByPrimaryKey(shop.getUserId());
//				CheckCode ck = null;
//				if(StringUtils.isNotBlank(shop.getPhone())){
//					ck = this.userService.getCheckCode(shop.getPhone());
//				}
//				if(ck==null || !ck.getCheckCode().equals(shop.getCheckCode())){
//					map.put("data", listMap);
//					map.put("state", "210");
//					map.put("msg", "验证码不正确！");
//					return map;
//				}
//				if (!shop.getPhone().equals(user.getPhone())) {
//					map.put("data", listMap);
//					map.put("state", "220");
//					map.put("msg", "手机号与本人不符");
//					return map;
//				}
//				if (shop.getReferPhone()!=null&&!"".equals(shop.getReferPhone())){
//					B_User refer = userService.selectByPhone(shop.getReferPhone());
//					if (refer==null||"".equals(refer)||!refer.getUserRoleId().contains(CommonParam.USER_ROLE_SALER)||refer.getStatus()==1) {
//						map.put("data", listMap);
//						map.put("state", "230");
//						map.put("msg", "未找到推荐人");
//						return map;
//					}
//					if (refer.getId()==user.getId()) {
//						map.put("data", listMap);
//						map.put("state", "240");
//						map.put("msg", "推荐人不能是自己");
//						return map;
//					}
//					shop.setReferId(refer.getId());
//				}
//				user.setAddr(shop.getUserAddr().trim());
//				userService.updatePhoneAndAddr(user);
//			}else if (shop.getFlag().equals("refer")) {//推荐商家
//				CheckCode ck = null;
//				if(StringUtils.isNotBlank(shop.getReferPhone())){
//					ck = this.userService.getCheckCode(shop.getReferPhone());
//				}
//				if(ck==null || !ck.getCheckCode().equals(shop.getCheckCode())){
//					map.put("data", listMap);
//					map.put("state", "210");
//					map.put("msg", "验证码不正确！");
//					return map;
//				}
//				shop.setReferId(shop.getUserId());
//				B_User user = userService.selectByPhone(shop.getPhone());
//				if (user==null) {
//					user = new B_User();
//					String pwd = TenpayUtil.buildRandom(6) + "";
//					user.setPwd(new MD5Code().getMD5ofStr(pwd));
//					user.setRegistTime(DateUtils.currtime());
//					user.setGardenId(1);
//					user.setPhone(shop.getPhone());
//					user.setLoginName(shop.getPhone());
//					user.setRealName(shop.getRealName());
//					user.setIdCard(shop.getCard());
//					user.setUserRoleId(CommonParam.USER_ROLE_MEMBER);
//			 		user.setHeadImgUrl(CommonParam.USER_HEAD_DEFAULT);
//			 		user.setMonthpay(0d);
//					user.setJifenNo(0.0);
//					user.setJifenYes(0.0);
//					user.setStatus((short) 0);
//					user.setUserType((short) 0);
//					user.setComsNo(0d);
//					user.setComsYes(0d);
//					user.setComsNo(0d);
//					user.setComsYes(0d);
//					user.setBalance(0d);
//					user.setTotalpay(0d);
//					user.setSurpluspay(0d);
//					user.setBonusNum(0d);
//					user.setRechargeNum(0d);
//					user.setOweNum(0d);
//					user.setTotalComs(0d);
//					user.setMonthComs(0d);
//					user.setAlonepay(0d);
//					user.setPayment(0d);
//					user.setReferNum(0d);
//					user.setTotalBonus(0d);
//					user.setMonthBonus(0d);
//					user.setTotalPayment(0d);
//					user.setMonthPayment(0d);
//					user.setTotalRefer(0d);
//					user.setMonthRefer(0d);
//					user.setOfferNum(0d);
//					userService.insert(user);
//					JavaSmsApi.sendPwd(user.getPhone(), pwd);
//					shop.setUserId(user.getId());
//				}
//			}
			shop.setStatus(0);
			if (shop.getId()!=null) {
				userService.updateByPrimaryKeySelective(shop);
			}else {
				shop.setCreateTime(DateUtils.currtime());
				shop.setShopType((short) 0);
				shop.setTotalMoney(0);
				shop.setMaxMoney(0);
				shop.setMonthMoney(0);
				shop.setOnlineMoney(0d);
				shop.setLineMoney(0d);
				userService.insertSelective(shop);
			}
			
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/postGoods")
	public Map<String, Object> postGoods(HttpServletRequest request,String tracks) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			System.out.println("tracks:::::"+tracks);
			JSONObject jsonObject = JSONObject.fromObject(tracks);
			B_Order_Track track = (B_Order_Track) JSONObject.toBean(jsonObject,B_Order_Track.class);
			track.setUpdateTime(new Date());
			B_Order order = orderService.selectByorderNum(track.getOrderNum());
			if (order.getStatus()==1) {
				userService.insertSelective(track);
				List<B_Order_Detail> detailList = detailService.selectByorderNum(order.getOrderNum());
				for (Iterator iterator = detailList.iterator(); iterator.hasNext();) {
					B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
					b_Order_Detail.setStatus(CommonParam.ORDER_STATUS_EMSING);
					detailService.updateByPrimaryKey(b_Order_Detail);
				}
				order.setStatus(CommonParam.ORDER_STATUS_EMSING);
				order.setPostTime(DateUtils.currtime());
				orderService.updateByPrimaryKeySelective(order);
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}	
	@ResponseBody
	@RequestMapping("/returnsDetail")
	public Map<String, Object> returnsDetail(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			String ordrNum = request.getParameter("ordrNum");
			B_Return returns = returnService.selectByOrderNum(ordrNum);
			B_Order order = orderService.selectByorderNum(ordrNum);
			B_User_Addr addr = addrService.selectByPrimaryKey(order.getAddrId());
			listMap.put("addr", addr);
			listMap.put("order", order);
			listMap.put("returns", returns);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/lineOrder")
	public Map<String, Object> lineOrder(HttpServletRequest request) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			String userId = request.getParameter("userId");
			String loginName = request.getParameter("loginName");
			String goodsName = request.getParameter("goodsName");
			Short  payWay = Short.valueOf(request.getParameter("payWay"));
			B_User seller = userService.selectByPrimaryKey(Integer.parseInt(userId));
			B_Shop shop = userService.selectByUserId(seller.getId(), 1);
			Double price = Double.parseDouble(request.getParameter("price"));
			Integer stock = Integer.parseInt(request.getParameter("stock"));
			Double totalPrice = price*stock;
			Double servicePrice = totalPrice*Double.valueOf(ProConfigMap.configMap.get("gatherFee"));
			B_User buyer = userService.selectByName(loginName);
			if (buyer==null) {
					map.put("data", listMap);
					map.put("state", "220");
					map.put("msg", "未获取买家信息，请核对账户");
					return map;
			}
			Short status = CommonParam.ORDER_STATUS_SUCCESS;
			Short status1 = CommonParam.ORDER_STATUS_SUCCESS;
			Short sign = 4;
			if (payWay==2) {
				if(servicePrice>seller.getBalance()){
					map.put("data", listMap);
					map.put("state", "210");
					map.put("msg", "余额不足，无法支付服务费");
					return map;
				}
				seller.setBalance(seller.getBalance()-servicePrice);
				userService.updateBalance(seller);
			}else {
				status = CommonParam.ORDER_STATUS_NO;
				status1 = CommonParam.ORDER_STATUS_NO;
			}
			String order_time = DateUtils.currtimeToString12();
			String strRandom = TenpayUtil.buildRandom(6) + "";
			String out_order_no= order_time+strRandom;
			B_Order_Detail order_Detail = new B_Order_Detail();
			String goodsId = request.getParameter("goodsId");
			if (StringUtils.isNotBlank(goodsId)) {
				B_Goods goods = goodsService.selectByPrimaryKey(Integer.parseInt(goodsId));
				order_Detail.setGoods(goods);
				order_Detail.setGoodsId(goods.getId());
			}else {
				B_Goods goods = new B_Goods();
				goods.setName(goodsName);
				goods.setPublisherId(seller.getId());
				goods.setPublisherName(seller.getNickName());
				goods.setPublishTime(DateUtils.currtime());
				goods.setShopId(shop.getId());
				goods.setStatus((short) 6);
				goods.setGoodsType(CommonParam.GOODS_TYPE_LINE);
				goods.setCashPrice((double) 0);
				goods.setPostPrice(0d);
				goodsService.insertSelective(goods);
				order_Detail.setGoods(goods);
				order_Detail.setGoodsId(goods.getId());
			}
			order_Detail.setOrderNum(out_order_no);
			order_Detail.setPrice(price);
			order_Detail.setTotalPrice(totalPrice);
//			order_Detail.setSpecId(spec_id);
			order_Detail.setStock(stock);
			order_Detail.setPrePayment(0d);
			order_Detail.setShopId(shop.getId());
			order_Detail.setStatus(status);
			order_Detail.setGoodsName(goodsName);
			order_Detail.setSign(sign);
			order_Detail.setCheckRed((short) 0);
//			order_Detail.setEnableTime(DateUtils.currtime());
			detailService.insert(order_Detail);
			B_Order order = new B_Order();
			order.setBuyUserId(buyer.getId());
			order.setCreateTime(DateUtils.currtime());
			order.setChange_time(DateUtils.currtime());
			order.setOrderNum(out_order_no);
			order.setStatus(status1);
//			order.setPostTime(postTime);
			order.setSellUserId(seller.getId());
			order.setTotalPrice(totalPrice);
			order.setTotalStock(stock);
			order.setPayWay(payWay);
			order.setShopId(shop.getId());
			order.setPrePayment(0d);
			order.setAssessed((short) 0);
			order.setSign(sign);
			List<B_User_Addr> addrList = addrService.selectByUser_Id(buyer.getId(), (short) 1);
			if (addrList.size()>0) {
				order.setAddrId(addrList.get(0).getId());
			}
			orderService.insert(order);
			if (payWay==2) {
				RedPacketRecord record = new RedPacketRecord();
				record.setCreateTime(DateUtils.currtime());
				record.setGivemoney(servicePrice);
				record.setOrderNum(order.getOrderNum());
				record.setDetailId(order_Detail.getId());
				record.setRedNum(0);
				record.setUserId(order.getSellUserId());
				record.setType((short) 5);
				redPacketService.insertSelective(record);
			}else {
				if (order.getStatus()==0&&order.getSign()==4) {
					String imgPath = new FileUnitl().getMediaPath()+order.getOrderNum()+".png";
					int width = 300, height = 300;
					B_User_Addr addr = new B_User_Addr();
					if (addrList.size()>0) {
						addr = addrList.get(0);
					}
					String create_time = DateUtils.currtime();
					String contents = "{\"state\":\"200\",\"data\":{\"order\":{\"id\":"+order.getId()+",\"orderNum\":\""+order.getOrderNum()+"\",\"status\":0,\"sign\":4,\"createTime\":\""+create_time+"\",\"addr\":{\"phone\":\""+loginName+"\"},\"shop\":{\"id\":"+shop.getId()+",\"name\":\""+shop.getName()+"\"},\"totalPrice\":"+order.getTotalPrice()+",\"totalStock\":"+order.getTotalStock()+",\"payWay\":4,\"detailList\":[{\"goods\":{\"name\":\""+goodsName+"\"},\"price\":"+price+",\"stock\":"+stock+"}]}},\"msg\":\"ok\"}";
					ZxingHandler.encode2(JSONObject.fromObject(contents).toString(), width, height, imgPath);
					String codeUrl=new FileUnitl().gethead_img_url()+order.getOrderNum()+".png";
					order.setCodeUrl(codeUrl);
					orderService.updateByPrimaryKeySelective(order);
					codeUrl=ASSET_URL+codeUrl;
					contents = "{\"id\":"+order.getId()+",\"codeUrl\":\""+codeUrl+"\",\"orderNum\":\""+order.getOrderNum()+"\",\"status\":0,\"sign\":4,\"createTime\":\""+create_time+"\",\"addr\":{\"phone\":\""+loginName+"\"},\"shop\":{\"id\":"+shop.getId()+",\"name\":\""+shop.getName()+"\"},\"totalPrice\":"+order.getTotalPrice()+",\"totalStock\":"+order.getTotalStock()+",\"payWay\":4,\"detailList\":[{\"goods\":{\"name\":\""+goodsName+"\"},\"price\":"+price+",\"stock\":"+stock+"}]}";
					listMap.put("order", JSONObject.fromObject(contents));
				}
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/saveBill")
	public Map<String, Object> saveBill(HttpServletRequest request) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			String userId = request.getParameter("userId");
			Short type = Short.valueOf(request.getParameter("type"));
			B_User user = userService.selectByPrimaryKey(Integer.parseInt(userId));
			double pickNum = Double.parseDouble(request.getParameter("pickNum"));
			B_Bill bill = new B_Bill();
			if (pickNum==0) {
				map.put("data", listMap);
				map.put("state", "240");
				map.put("msg", "别捣乱！");
				return map;
			}
			Integer bankId = Integer.parseInt(request.getParameter("bankId"));
			if (type==0) {
				if (pickNum>user.getBalance()) {
					map.put("data", listMap);
					map.put("state", "210");
					map.put("msg", "你没那么多余额");
					return map;
				}
				if (100>pickNum) {
					map.put("data", listMap);
					map.put("state", "211");
					map.put("msg", "一次至少提现100元");
					return map;
				}
				user.setBalance(user.getBalance()-pickNum);
				userService.updateBalance(user);
				Double coms = Double.parseDouble(ProConfigMap.configMap.get("balanceComs"));
				bill.setCommRate(coms);
				bill.setCommSum(pickNum-pickNum*coms);
			}else if (type==1) {
				if (pickNum>user.getComsYes()) {
					map.put("data", listMap);
					map.put("state", "220");
					map.put("msg", "你没那么多业绩");
					return map;
				}
				user.setComsYes(user.getComsYes()-pickNum);
				userService.updateComsYes(user);
			}else if (type==2) {
				if (pickNum>user.getOweNum()) {
					map.put("data", listMap);
					map.put("state", "230");
					map.put("msg", "你没那么多感恩奖");
					return map;
				}
				user.setOweNum(user.getOweNum()-pickNum);
				userService.updateOweNum(user);
			}else if (type==3) {
				if (pickNum>user.getBonusNum()) {
					map.put("data", listMap);
					map.put("state", "230");
					map.put("msg", "你没那么多佣金");
					return map;
				}
				user.setBonusNum(user.getBonusNum()-pickNum);
				userService.updateBonusNum(user);
			}else if (type==4) {
				if (pickNum>user.getReferNum()) {
					map.put("data", listMap);
					map.put("state", "230");
					map.put("msg", "你没那么多推荐奖");
					return map;
				}
				user.setReferNum(user.getReferNum()-pickNum);
				userService.updateReferNum(user);
			}else if (type==5) {
				if (pickNum>user.getPayment()) {
					map.put("data", listMap);
					map.put("state", "230");
					map.put("msg", "你没那么多货款");
					return map;
				}
				user.setPayment(user.getPayment()-pickNum);
				userService.updatePayment(user);
				Double coms = Double.parseDouble(ProConfigMap.configMap.get("oweFee"));
				bill.setCommRate(coms);
				bill.setCommSum(pickNum-pickNum*coms);
			}
			
			bill.setBankId(bankId);
			bill.setCreateTime(DateUtils.currtime());
			bill.setStatus((short) 1);
			bill.setSellerUserId(user.getId());
			bill.setCountAll(pickNum);
			bill.setPeriodCode(DateUtils.currtimeToString8());
			bill.setType(type);
			userService.insertSelective(bill);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/agencyList")
	public Map<String, Object> agencyList(HttpServletRequest request) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			Integer userId = Integer.parseInt(request.getParameter("userId"));
			B_User user = userService.selectByPrimaryKey(userId);
			String flag = request.getParameter("flag");
			List<B_User> userList = new ArrayList<B_User>();
			List<B_Shop> shopList = new ArrayList<B_Shop>();
			String bonus="";
			if (flag.equals("pro")) {
				userList = userService.selectByroleIdandAddr(CommonParam.USER_ROLE_PRO,user.getAddr());
				bonus = ProConfigMap.configMap.get("provincialAgency") ;
				if (userList.size()>0) {
					for (Iterator iterator = userList.iterator(); iterator.hasNext();) {
						B_User b_User = (B_User) iterator.next();
						if (!b_User.getHeadImgUrl().contains("http")) {
							b_User.setHeadImgUrl(ASSET_URL+user.getHeadImgUrl());
						}
						BigDecimal a1 = new BigDecimal(bonus);
						BigDecimal b1 = new BigDecimal(String.valueOf(user.getMonthComs()));
						Double monthBonus = a1.multiply(b1).doubleValue();
						b_User.setMonthNum(monthBonus);
						Map shopMap = userService.getCountComsReferId(null,user.getAddr());
						b_User.setOnlineMoney(shopMap.get("onlineMoney").toString());
						b_User.setLineMoney(shopMap.get("lineMoney").toString());
					}
					listMap.put("list", userList);
				}
			}else if (flag.equals("city")) {
				userList = userService.selectByroleIdandAddr(CommonParam.USER_ROLE_CITY,user.getAddr());
				bonus = ProConfigMap.configMap.get("cityAgency") ;
				if (userList.size()>0) {
					for (Iterator iterator = userList.iterator(); iterator.hasNext();) {
						B_User b_User = (B_User) iterator.next();
						if (!b_User.getHeadImgUrl().contains("http")) {
							b_User.setHeadImgUrl(ASSET_URL+user.getHeadImgUrl());
						}
						BigDecimal a1 = new BigDecimal(bonus);
						BigDecimal b1 = new BigDecimal(String.valueOf(user.getMonthComs()));
						Double monthBonus = a1.multiply(b1).doubleValue();
						b_User.setMonthNum(monthBonus);
						Map shopMap = userService.getCountComsReferId(null,user.getAddr());
						b_User.setOnlineMoney(shopMap.get("onlineMoney").toString());
						b_User.setLineMoney(shopMap.get("lineMoney").toString());
					}
					listMap.put("list", userList);
				}
			}else if (flag.equals("town")) {
				userList = userService.selectByroleIdandAddr(CommonParam.USER_ROLE_COUNT,user.getAddr());
				bonus = ProConfigMap.configMap.get("countyAgency") ;
				if (userList.size()>0) {
					for (Iterator iterator = userList.iterator(); iterator.hasNext();) {
						B_User b_User = (B_User) iterator.next();
						if (!b_User.getHeadImgUrl().contains("http")) {
							b_User.setHeadImgUrl(ASSET_URL+user.getHeadImgUrl());
						}
						BigDecimal a1 = new BigDecimal(bonus);
						BigDecimal b1 = new BigDecimal(String.valueOf(user.getMonthComs()));
						Double monthBonus = a1.multiply(b1).doubleValue();
						b_User.setMonthNum(monthBonus);
						Map shopMap = userService.getCountComsReferId(null,user.getAddr());
						b_User.setOnlineMoney(shopMap.get("onlineMoney").toString());
						b_User.setLineMoney(shopMap.get("lineMoney").toString());
					}
					listMap.put("list", userList);
				}
			}else if (flag.equals("saler")) {
				userList = userService.selectUserByOwerId(userId);
				bonus = ProConfigMap.configMap.get("clerkSeller") ;
				if (userList.size()>0) {
					for (Iterator iterator = userList.iterator(); iterator.hasNext();) {
						B_User b_User = (B_User) iterator.next();
						if (!b_User.getHeadImgUrl().contains("http")) {
							b_User.setHeadImgUrl(ASSET_URL+user.getHeadImgUrl());
						}
						BigDecimal a1 = new BigDecimal(bonus);
						BigDecimal b1 = new BigDecimal(String.valueOf(user.getMonthRefer()));
						Double monthBonus = a1.multiply(b1).doubleValue();
						b_User.setMonthNum(monthBonus);
						b_User.setTotalComs(b_User.getTotalRefer());
						b_User.setMonthComs(b_User.getMonthRefer());
						b_User.setComsYes(b_User.getReferNum());
					}
					listMap.put("list", userList);
				}
			}else if (flag.equals("member")) {
				userList = userService.selectUserByReferId(userId,"");
				bonus = ProConfigMap.configMap.get("clerkMember");
				if (userList.size()>0) {
					for (Iterator iterator = userList.iterator(); iterator.hasNext();) {
						B_User b_User = (B_User) iterator.next();
						if (!b_User.getHeadImgUrl().contains("http")) {
							b_User.setHeadImgUrl(ASSET_URL+user.getHeadImgUrl());
						}
						BigDecimal a1 = new BigDecimal(bonus);
						BigDecimal b1 = new BigDecimal(String.valueOf(user.getAlonepay()));
						Double monthBonus = a1.multiply(b1).doubleValue();
						b_User.setComsYes(monthBonus);
					}
					listMap.put("list", userList);
				}
			}else if (flag.equals("shop")) {
				shopList = userService.selectByReferId(userId);
			}else if (flag.equals("agencyShop")) {
				shopList = userService.selectByAddr(user.getAddr());
			}
			if (shopList.size()>0) {
				for (Iterator iterator = shopList.iterator(); iterator.hasNext();) {
					B_Shop b_Shop = (B_Shop) iterator.next();
					b_Shop.setLogoUrl(ASSET_URL+b_Shop.getLogoUrl());
				}
				listMap.put("list", shopList);
			}
			
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/saveImg")
	public Map<String, Object> saveImg(HttpServletRequest request,String dataBase64) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			String fileName = Calendar.getInstance().getTimeInMillis()+".jpg";
			String img_url="";
			if(new FileUnitl().GenerateImage(dataBase64, fileName)){
				img_url = new FileUnitl().gethead_img_url()+fileName;
				listMap.put("imgUrl", ASSET_URL+img_url);
//				listMap.put("ASSET_URL", ASSET_URL);
			}else {
				state = "210";
				msg = "生成图像失败";
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/servicePrice")
	public Map<String, Object> servicePrice(HttpServletRequest request) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			BigDecimal a1 = new BigDecimal(ProConfigMap.configMap.get("gatherFee"));
			BigDecimal b1 = new BigDecimal(request.getParameter("totalPrice"));
			Double servicePrice = a1.multiply(b1).doubleValue();
			listMap.put("servicePrice", servicePrice);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/roleIndex")
	public Map<String, Object> userInfo(HttpServletRequest request) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			Integer userId = Integer.parseInt(request.getParameter("userId"));
			B_User user = userService.selectByPrimaryKey(userId);
			String roleId = request.getParameter("roleId");
			DecimalFormat df = new DecimalFormat("#.##");
			if (roleId.equals(CommonParam.USER_ROLE_SELLER)) {
				B_Shop shop = userService.selectByUserId(userId, 1);
				listMap.put("totalMoney", df.format(shop.getTotalMoney()));
				listMap.put("monthMoney", df.format(shop.getMonthMoney()));
				BigDecimal a1 = new BigDecimal(1-Double.parseDouble(ProConfigMap.configMap.get("gatherFee")));
				BigDecimal b1 = new BigDecimal(String.valueOf(shop.getMonthMoney()));
				Double monthComs = a1.multiply(b1).doubleValue();
				listMap.put("monthComs", df.format(monthComs));
				listMap.put("comsYes", df.format(user.getPayment()));
				listMap.put("onlineMoney", df.format(shop.getOnlineMoney()));
				listMap.put("lineMoney", df.format(shop.getLineMoney()));
				shop.setLogoUrl(ASSET_URL+shop.getLogoUrl());
				listMap.put("shop", shop);
			}else {
				Integer salerMoney = userService.getCountComsUserByOwerId(userId);
				listMap.put("salerMoney", salerMoney);
				if (roleId.equals(CommonParam.USER_ROLE_PRO)) {
					listMap.put("totalMoney", df.format(user.getTotalComs()));
					listMap.put("monthMoney", df.format(user.getMonthComs()));
					listMap.put("comsYes", df.format(user.getComsYes()));
					BigDecimal a1 = new BigDecimal(ProConfigMap.configMap.get("provincialAgency"));
					BigDecimal b1 = new BigDecimal(String.valueOf(user.getMonthComs()));
					Double monthComs = a1.multiply(b1).doubleValue();
					listMap.put("monthComs", df.format(monthComs));
					Integer agencyMoney = userService.getCountComsByroleIdandAddr(CommonParam.USER_ROLE_CITY, user.getAddr());
					listMap.put("agencyMoney", df.format(agencyMoney));
					Map shopMap = userService.getCountComsReferId(null,user.getAddr());
					listMap.put("onlineMoney", df.format(shopMap.get("onlineMoney")));
					listMap.put("lineMoney", df.format(shopMap.get("lineMoney")));
				}else if (roleId.equals(CommonParam.USER_ROLE_CITY)) {
					listMap.put("totalMoney", df.format(user.getTotalComs()));
					listMap.put("monthMoney", df.format(user.getMonthComs()));
					listMap.put("comsYes", df.format(user.getComsYes()));
					BigDecimal a1 = new BigDecimal(ProConfigMap.configMap.get("cityAgency"));
					BigDecimal b1 = new BigDecimal(String.valueOf(user.getMonthComs()));
					Double monthComs = a1.multiply(b1).doubleValue();
					listMap.put("monthComs", df.format(monthComs));
					Integer agencyMoney = userService.getCountComsByroleIdandAddr(CommonParam.USER_ROLE_COUNT, user.getAddr());
					listMap.put("agencyMoney", df.format(agencyMoney));
					Map shopMap = userService.getCountComsReferId(null,user.getAddr());
					listMap.put("onlineMoney", df.format(shopMap.get("onlineMoney")));
					listMap.put("lineMoney", df.format(shopMap.get("lineMoney")));
				}else if (roleId.equals(CommonParam.USER_ROLE_COUNT)) {
					listMap.put("totalMoney", df.format(user.getTotalComs()));
					listMap.put("monthMoney", df.format(user.getMonthComs()));
					listMap.put("comsYes", df.format(user.getComsYes()));
					BigDecimal a1 = new BigDecimal(ProConfigMap.configMap.get("countyAgency"));
					BigDecimal b1 = new BigDecimal(String.valueOf(user.getMonthComs()));
					Double monthComs = a1.multiply(b1).doubleValue();
					listMap.put("monthComs", df.format(monthComs));
					Integer agencyMoney = userService.getCountComsByroleIdandAddr(CommonParam.USER_ROLE_COUNT, user.getAddr());
					listMap.put("agencyMoney", df.format(agencyMoney));
					Map shopMap = userService.getCountComsReferId(null,user.getAddr());
					listMap.put("onlineMoney", df.format(shopMap.get("onlineMoney")));
					listMap.put("lineMoney", df.format(shopMap.get("lineMoney")));
				}else if (roleId.equals(CommonParam.USER_ROLE_SALER)) {
					listMap.put("totalMoney", df.format(user.getTotalRefer()));
					listMap.put("monthMoney", df.format(user.getMonthRefer()));
					listMap.put("comsYes", df.format(user.getReferNum()));
					BigDecimal a1 = new BigDecimal(ProConfigMap.configMap.get("clerkSeller"));
					BigDecimal b1 = new BigDecimal(String.valueOf(user.getMonthRefer()));
					Double monthComs = a1.multiply(b1).doubleValue();
					listMap.put("monthComs", df.format(monthComs));
					Map shopMap = userService.getCountComsReferId(userId,null);
					listMap.put("onlineMoney", df.format(shopMap.get("onlineMoney")));
					listMap.put("lineMoney", df.format(shopMap.get("lineMoney")));
					listMap.put("agencyMoney", df.format(shopMap.get("totalMoney")));
				}else if (roleId.equals(CommonParam.USER_ROLE_COMER)) {
					listMap.put("totalMoney", df.format(user.getTotalBonus()));
					listMap.put("monthMoney", df.format(user.getMonthBonus()));
					listMap.put("comsYes", df.format(user.getComsYes()));
					BigDecimal a1 = new BigDecimal(ProConfigMap.configMap.get("clerkMember"));
					BigDecimal b1 = new BigDecimal(String.valueOf(user.getMonthBonus()));
					Double monthComs = a1.multiply(b1).doubleValue();
					listMap.put("monthComs", df.format(monthComs));
					Integer agencyMoney = userService.getCountComsUserByReferId(userId);
					listMap.put("agencyMoney", df.format(agencyMoney));
//					Map shopMap = userService.getCountComsReferId(null,user.getAddr());
//					listMap.put("onlineMoney", map.get("onlineMoney"));
//					listMap.put("lineMoney", map.get("lineMoney"));
				}
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("shopIndex")
	public Map<String, Object> shopIndex(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			Map<String, String> configMap = ProConfigMap.configMap;
			List<ShopCatalog> parentCatalogs  = userService.selectAllParentShopCatalog();
			for (Iterator iterator = parentCatalogs.iterator(); iterator.hasNext();) {
				ShopCatalog b_Catalog = (ShopCatalog) iterator.next();
				b_Catalog.setImgUrl(ASSET_URL+b_Catalog.getImgUrl());
			}
			listMap.put("parentCatalogList", parentCatalogs);
			
			List<ImgSet> shopBanner = userService.getImgSet("shopBanner");
			listMap.put("shopBannerList", shopBanner);
			List<ImgSet> shopMBanner = userService.getImgSet("shopMBanner");
			listMap.put("shopMBannerList", shopMBanner);
			
			//美食
			ImgSet msImgSet = new ImgSet();
			msImgSet.setId(configMap.get("appMImgId3"));
			msImgSet.setType(configMap.get("appMImgFlag3"));
			msImgSet.setImg(ASSET_URL+configMap.get("appMImg3"));
			listMap.put("msImgSet", msImgSet);
			//时尚生活
			ImgSet shImgSet = new ImgSet();
			shImgSet.setId(configMap.get("appMImgId4"));
			shImgSet.setType(configMap.get("appMImgFlag4"));
			shImgSet.setImg(ASSET_URL+configMap.get("appMImg4"));
			listMap.put("shImgSet", shImgSet);
			//电影
			ImgSet dyImgSet = new ImgSet();
			dyImgSet.setId(configMap.get("appMImgId5"));
			dyImgSet.setType(configMap.get("appMImgFlag5"));
			dyImgSet.setImg(ASSET_URL+configMap.get("appMImg5"));
			listMap.put("dyImgSet", dyImgSet);
			//外卖
			ImgSet wmImgSet = new ImgSet();
			wmImgSet.setId(configMap.get("appMImgId6"));
			wmImgSet.setType(configMap.get("appMImgFlag6"));
			wmImgSet.setImg(ASSET_URL+configMap.get("appMImg6"));
			listMap.put("wmImgSet", wmImgSet);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("shopListPage")
	public Map<String, Object> shopListPage(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			int currentPage = request.getParameter("pages")==null?1:Integer.parseInt(request.getParameter("pages"));
			String name = request.getParameter("name");
			String addr = request.getParameter("addr");
			List<Integer> catalogIdList = new ArrayList<Integer>();
			String catalogId = request.getParameter("catalogId");
			if (StringUtils.isNotBlank(catalogId)) {
				ShopCatalog catalog = userService.selectShopCatalog(Integer.parseInt(catalogId));
				listMap.put("catalog", catalog);
				if (catalog.getParentId()!=null) {
					catalogIdList.add(catalog.getId());
				}else {
					List<ShopCatalog> catalogs = userService.selectByParentId(catalog.getId());
					for (Iterator iterator = catalogs.iterator(); iterator.hasNext();) {
						ShopCatalog b_Catalog = (ShopCatalog) iterator.next();
						catalogIdList.add(b_Catalog.getId());
					}
				}
			}
			int pageSize = 10;
			if (currentPage<=0){
				currentPage =1;
			}
			int currentResult = (currentPage-1) * pageSize;
			
			PageInfo page = new PageInfo();
			page.setShowCount(pageSize);
			page.setCurrentResult(currentResult);
			List<B_Shop> shopList = userService.selectShopListPage(page, 1,name,addr,catalogIdList,null); 
			for (Iterator iterator = shopList.iterator(); iterator.hasNext();) {
				B_Shop b_Shop = (B_Shop) iterator.next();
				b_Shop.setLogoUrl(ASSET_URL+b_Shop.getLogoUrl());
			}
			
			int totalCount = page.getTotalResult();
			
			int lastPage=0;
			if (totalCount % pageSize==0){
				lastPage = totalCount / pageSize;
			}
			else{
				lastPage =1+ totalCount / pageSize;
			}
			if (currentPage>=lastPage){
				currentPage =lastPage;
			}
			page.setTotalPage(lastPage);
			page.setCurrentPage(currentPage);
			listMap.put("page", page);
			listMap.put("list", shopList);
		} catch (Exception e) {
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/saveGoods")
	public Map<String, Object> saveGoods(HttpServletRequest request,String good,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			JSONObject jsonObject = JSONObject.fromObject(good);
			B_Goods goods = (B_Goods) JSONObject.toBean(jsonObject,B_Goods.class);
			System.out.println("catalogId::::::::::"+goods.getCatalogId());
			if (StringUtils.isBlank(goods.getCatalogId())) {
				map.put("data", listMap);
				map.put("state", "220");
				map.put("msg", "请选择商品类别");
				return map;
			}
			B_User user = userService.selectByPrimaryKey(Integer.parseInt(userId));
			B_Goods goods2 = goodsService.selectByBarCode(goods.getBarCode(),Integer.parseInt(userId));
			if (goods2!=null) {
				map.put("data", listMap);
				map.put("state", "210");
				map.put("msg", "该商品已经入库，无需重复入库");
				return map;
			}
			B_Shop shop = userService.selectByUserId(user.getId(),1);
			if (goods.getId()!=null) {
				goodsService.updateByPrimaryKeySelective(goods);
			}else {
				goods.setStatus((short) 9);
				goods.setShopId(shop.getId());
				goods.setGoodsType(CommonParam.GOODS_TYPE_NORMAL);
				goods.setPublisherId(user.getId());
				goods.setPublisherName(user.getNickName());
				goods.setPublishTime(DateUtils.currtime());
				goods.setCashPrice((double) 0);
				goods.setSellType((short) 0);
				goodsService.insertSelective(goods);
			}
			
			JSONArray extArray = jsonObject.getJSONArray("goodsExts");
	        for (int i = 0; i < extArray.size(); i++) {
	        	JSONObject jsonObject1 = extArray.getJSONObject(i);
	        	B_Goods_Ext ext = (B_Goods_Ext) JSONObject.toBean(jsonObject1, B_Goods_Ext.class);
	        	if (ext.getId()!=null) {
					goodsExtMapper.updateByPrimaryKeySelective(ext);
				}else {
					ext.setGoodsId(goods.getId());
//					ext.setSeq((short)(i+1));
					goodsExtMapper.insert(ext);
				}
	        }
			Integer stock = 0;
			JSONArray specArray = jsonObject.getJSONArray("specList");
	        for (int i = 0; i < specArray.size(); i++) {
	        	JSONObject jsonObject1 = specArray.getJSONObject(i);
	        	B_Spec b_Spec = (B_Spec) JSONObject.toBean(jsonObject1, B_Spec.class);
	        	if (b_Spec.getId()!=null) {
					specService.updateByPrimaryKeySelective(b_Spec);
				}else {
					b_Spec.setGoodsId(goods.getId());
					b_Spec.setStatus(0);
					specService.saveSpec(b_Spec);
				}
				stock = stock+b_Spec.getStock();
	        }
			goods.setStock(stock);
			System.out.println("catalogId::::::::::"+goods.getCatalogId());
			goodsService.updateByPrimaryKeySelective(goods);
			System.out.println("catalogId::::::::::"+goods.getCatalogId());
			
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/releaseGoods")
	public Map<String, Object> releaseGoods(HttpServletRequest request,String goodsId,String serviceImg,String contentImg,String imgList,String headImg,String specs) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_Goods goods = goodsService.selectByPrimaryKey(Integer.parseInt(goodsId));
			if (StringUtils.isNotBlank(serviceImg)) {
				String service = "<p><img src=\""+serviceImg+"\" title=\"\" alt=\"\"/></p>";
				goods.setService(service);
			}
			if (StringUtils.isNotBlank(contentImg)) {
				String content = "<p><img src=\""+contentImg+"\" title=\"\" alt=\"\"/></p>";
				goods.setContent(content);
			}
			if (StringUtils.isNotBlank(headImg)) {
				goods.setHeadImgUrl(headImg.replace(ASSET_URL, ""));
			}
			String price = request.getParameter("price");
			if (StringUtils.isNotBlank(price)) {
				goods.setPrice(price);
			}else {
				map.put("data", listMap);
				map.put("state", "210");
				map.put("msg", "请输入展示价格");
				return map;
			}
			goods.setStatus((short) 0);
			String goodsType = request.getParameter("goodsType");
			if (StringUtils.isNotBlank(goodsType)) {
				goods.setGoodsType(Short.parseShort(goodsType));
			}else {
				goods.setGoodsType(CommonParam.GOODS_TYPE_NORMAL);
			}
			if (StringUtils.isNotBlank(goodsType)&&goodsType.equals(CommonParam.GOODS_TYPE_PD+"")) {
				String mergeNum  = request.getParameter("mergeNum");
				if (StringUtils.isNotBlank(mergeNum)) {
					if (Integer.parseInt(mergeNum)>Integer.parseInt(ProConfigMap.configMap.get("mergeMax"))||Integer.parseInt(mergeNum)<Integer.parseInt(ProConfigMap.configMap.get("mergeMin"))) {
						map.put("data", listMap);
						map.put("state", "230");
						map.put("msg", "拼单人数最少"+ProConfigMap.configMap.get("mergeMin")+"，最多"+ProConfigMap.configMap.get("mergeMax"));
						return map;
					}
					goods.setMergeNum(Integer.parseInt(mergeNum));
				}else {
					map.put("data", listMap);
					map.put("state", "210");
					map.put("msg", "请输入拼单人数");
					return map;
				}
				String discount  = request.getParameter("discount");
				if (StringUtils.isNotBlank(discount)) {
					goods.setDiscount(Double.parseDouble(discount));
				}else {
					map.put("data", listMap);
					map.put("state", "220");
					map.put("msg", "请输入折扣");
					return map;
				}
			}
			goodsService.appReleaseGoods(goods);
			JSONArray jsonArray = JSONArray.fromObject(imgList);
	        for (int i = 0; i < jsonArray.size(); i++) {
	        	JSONObject jsonObject = jsonArray.getJSONObject(i);
	        	B_Goods_Img img = (B_Goods_Img) JSONObject.toBean(jsonObject, B_Goods_Img.class);
	        	img.setGoodsId(goods.getId());
	        	img.setImgUrl(img.getImgUrl().replace(ASSET_URL, ""));
				imgService.saveGoodsImg(img);
	        }
	        JSONArray specArray = JSONArray.fromObject(specs);
	        for (int i = 0; i < specArray.size(); i++) {
	        	JSONObject jsonObject = specArray.getJSONObject(i);
	        	B_Spec spec = (B_Spec) JSONObject.toBean(jsonObject, B_Spec.class);
	        	specService.updateByPrimaryKeySelective(spec);
	        }
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/goodsDetail")
	public Map<String, Object> goodsDetail(HttpServletRequest request,String goodsId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_Goods goods = goodsService.selectByPrimaryKey(Integer.parseInt(goodsId));
			String[] catalogs = goods.getCatalogId().split(",");
			String catalogName = "";
			for (int i = 0; i < catalogs.length; i++) {
				B_Catalog catalog = catalogService.selectByPrimaryKey(Integer.parseInt(catalogs[i]));
				catalogName=catalog.getName()+"|";
			}
			catalogName = catalogName.substring(0,catalogName.length() - 1);
			goods.setCatalogName(catalogName);
			List<B_Goods_Ext> extList = extService.selectByGoods_id(goods.getId());
			listMap.put("extList", extList);
			List<B_Spec> specList = specService.selectByGoodsId(goods.getId());
			listMap.put("specList", specList);
			listMap.put("goods", goods);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/getGoodsByBarCode")
	public Map<String, Object> getGoodsByBarCode(HttpServletRequest request,String barCode,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_Goods goods = goodsService.selectByBarCode(barCode,Integer.parseInt(userId));
			if (goods==null) {
				map.put("data", listMap);
				map.put("state", "210");
				map.put("msg", "未找到商品");
				return map;
			}
			String[] catalogs = goods.getCatalogId().split(",");
			String catalogName = "";
			for (int i = 0; i < catalogs.length; i++) {
				B_Catalog catalog = catalogService.selectByPrimaryKey(Integer.parseInt(goods.getCatalogId()));
				catalogName=catalog.getName()+"|";
			}
			catalogName = catalogName.substring(0,catalogName.length() - 1);
			goods.setCatalogName(catalogName);
			List<B_Goods_Ext> extList = extService.selectByGoods_id(goods.getId());
			listMap.put("extList", extList);
			List<B_Spec> specList = specService.selectByGoodsId(goods.getId());
			listMap.put("specList", specList);
			listMap.put("goods", goods);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/delGoods")
	public Map<String, Object> delGoods(HttpServletRequest request,String goodsId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			goodsService.delGoodsByPrimaryKey(Integer.parseInt(goodsId));
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/editSpec")
	public Map<String, Object> editSpec(HttpServletRequest request,String specs) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			JSONObject jsonObject = JSONObject.fromObject(specs);
			B_Spec spec = (B_Spec) JSONObject.toBean(jsonObject,B_Spec.class);
			specService.updateByPrimaryKeySelective(spec);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/editExt")
	public Map<String, Object> editExt(HttpServletRequest request,String exts) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			JSONObject jsonObject = JSONObject.fromObject(exts);
			B_Goods_Ext ext = (B_Goods_Ext) JSONObject.toBean(jsonObject,B_Goods_Ext.class);
			extService.updateByPrimaryKeySelective(ext);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/getSellerGoodsListPage")
	public Map<String, Object> getSellerGoodsListPage(HttpServletRequest request) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			int currentPage = request.getParameter("pages")==null?1:Integer.parseInt(request.getParameter("pages"));
			int pageSize = 10;
			if (currentPage<=0){
				currentPage =1;
			}
			int currentResult = (currentPage-1) * pageSize;
			
			PageInfo page = new PageInfo();
			page.setShowCount(pageSize);
			page.setCurrentResult(currentResult);
			String orderBy = request.getParameter("orderBy")==null?"no":request.getParameter("orderBy");
			String keyword = request.getParameter("keyword");
			Integer publisherId = Integer.parseInt(request.getParameter("userId"));
			//flag:ending即将过期，end已过期，less库存告急
			String flag = request.getParameter("flag");
			String statustr = request.getParameter("status");
			Short status = null;
			//APP传递状态参数0：待审核；1：上架/竞拍中；2：下架/停拍；10：平台商品
			if (StringUtils.isBlank(flag)) {
				if (StringUtils.isNotBlank(statustr)) {
					if (statustr.equals("10")) {
						status = CommonParam.GOODS_STATUS_UP;
						publisherId=null;
					}else {
						status = Short.valueOf(statustr);
					}
				}
			}else {
				status = CommonParam.GOODS_STATUS_UP;
			}
			List<B_Goods> typeGoodsList = new ArrayList<B_Goods>();
			
			if (flag!=null&&flag.equals("less")) {
				List<B_Spec> specList = specService.selectLessGoodsListPage(page, publisherId);
				for (Iterator iterator = specList.iterator(); iterator.hasNext();) {
					B_Spec b_Spec = (B_Spec) iterator.next();
					B_Goods goods = goodsService.selectByPrimaryKey(b_Spec.getGoodsId());
					goods.setHeadImgUrl(ASSET_URL+goods.getHeadImgUrl());
					goods.setSpec(b_Spec);
					typeGoodsList.add(goods);
				}
			}else {
				typeGoodsList = goodsService.getSellerGoodsListPage(flag,keyword, orderBy, page, status,CommonParam.GOODS_TYPE_NORMAL,publisherId);
				for(B_Goods goods:typeGoodsList){
//					List<B_Goods_Ext> extList = extService.selectByGoods_id(goods.getId());
//					goods.setGoodsExts(extList);
					if (StringUtils.isNotBlank(statustr)) {
						if (statustr.equals("10")) {
							List<ShopGoods> shopGoodsList = shopGoodsService.selectByShopIdOrGoodsId(goods.getShopId(), goods.getId(), (short) 0);
							if (shopGoodsList.size()>0) {
								goods.setStatus((short) 1);
							}else {
								goods.setStatus((short) 0);
							}
						}
					}
					String[] catalogs = goods.getCatalogId().split(",");
					String catalogName = "";
					for (int i = 0; i < catalogs.length; i++) {
						B_Catalog catalog = catalogService.selectByPrimaryKey(Integer.parseInt(catalogs[i]));
						catalogName=catalog.getName()+"|";
					}
					catalogName = catalogName.substring(0,catalogName.length() - 1);
					goods.setCatalogName(catalogName);
					goods.setHeadImgUrl(ASSET_URL+goods.getHeadImgUrl());
				}
			}
			
			int totalCount = page.getTotalResult();
			int lastPage=0;
			if (totalCount % pageSize==0){
				lastPage = totalCount / pageSize;
			}
			else{
				lastPage =1+ totalCount / pageSize;
			}
			if (currentPage>=lastPage){
				currentPage =lastPage;
			}
			page.setTotalPage(lastPage);
			page.setCurrentPage(currentPage);
			listMap.put("page", page);
			listMap.put("list", typeGoodsList);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/upGoods")
	public Map<String, Object> upGoods(HttpServletRequest request,String goodsIds) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			String[] goodsStrings = goodsIds.split(",");
			String userId = request.getParameter("userId");
			B_Shop shop = userService.selectByUserId(Integer.parseInt(userId), 1);
			for (int i = 0; i < goodsStrings.length; i++) {
				B_Goods goods = goodsService.selectByPrimaryKey(Integer.parseInt(goodsStrings[i]));
				if (goods.getPublisherId().equals(shop.getUserId())) {
					goods.setStatus((short) 1);
					goodsService.updateByPrimaryKey(goods);
				}else {
					List<ShopGoods> shopGoodsList = shopGoodsService.selectByShopIdOrGoodsId(shop.getId(), goods.getId(), null);
					if (shopGoodsList.size()>0) {
						ShopGoods shopGoods = shopGoodsList.get(0);
						shopGoods.setStatus((short) 0);
						shopGoodsService.updateByPrimaryKeySelective(shopGoods);
					}else {
						ShopGoods shopGoods = new ShopGoods();
						shopGoods.setGoodsId(goods.getId());
						shopGoods.setShopId(shop.getId());
						shopGoods.setStatus((short) 0);
						shopGoods.setCreateTime(DateUtils.currtime());
						shopGoods.setUpdateTime(DateUtils.currtime());
						shopGoodsService.insertSelective(shopGoods);
					}
				}
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/downGoods")
	public Map<String, Object> downGoods(HttpServletRequest request,String goodsIds) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			String userId = request.getParameter("userId");
			B_Shop shop = userService.selectByUserId(Integer.parseInt(userId), 1);
			String[] goodsStrings = goodsIds.split(",");
			for (int i = 0; i < goodsStrings.length; i++) {
				B_Goods goods = goodsService.selectByPrimaryKey(Integer.parseInt(goodsStrings[i]));
				if (goods.getPublisherId().equals(shop.getUserId())) {
					goods.setStatus((short) 2);
					goodsService.updateByPrimaryKey(goods);
				}else {
					List<ShopGoods> shopGoodsList = shopGoodsService.selectByShopIdOrGoodsId(shop.getId(), goods.getId(), null);
					if (shopGoodsList.size()>0) {
						ShopGoods shopGoods = shopGoodsList.get(0);
						shopGoods.setStatus((short) 1);
						shopGoodsService.updateByPrimaryKeySelective(shopGoods);
					}
				}
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/shopCatalog")
	public Map<String, Object> shopCatalog(HttpServletRequest request) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			List<ShopCatalog> parentCatalogs  = userService.selectAllParentShopCatalog();
			List<ListMap> catalogList = new ArrayList<ListMap>();
			for (Iterator iterator = parentCatalogs.iterator(); iterator.hasNext();) {
				ShopCatalog b_Catalog = (ShopCatalog) iterator.next();
				b_Catalog.setImgUrl(ASSET_URL+b_Catalog.getImgUrl());
				List<ShopCatalog> sonList = userService.selectByParentId(b_Catalog.getId());
				ListMap listMap2=new ListMap();
				listMap2.setId(b_Catalog.getId());
				listMap2.setName(b_Catalog.getName());
				listMap2.setDateList(sonList);
				catalogList.add(listMap2);
			}
			listMap.put("catalogList", catalogList);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/getUserByPhone")
	public Map<String, Object> getUserByPhone(HttpServletRequest request,String phone) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			if (StringUtils.isBlank(phone)) {
				map.put("data", listMap);
				map.put("state", "210");
				map.put("msg", "手机号不能为空");
				return map;
			}else {
				B_User user = userService.selectByPhone(phone);
				if (user==null) {
					map.put("data", listMap);
					map.put("state", "220");
					map.put("msg", "该手机号暂未注册会员");
					return map;
				}else {
					listMap.put("hxf", user.getRechargeNum());
					listMap.put("userName", user.getNickName());
				}
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/referMember")
	public Map<String, Object> referMember(HttpServletRequest request,String userId,String phone,String name,String pwd,String addr) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_User refer = userService.selectByPrimaryKey(Integer.parseInt(userId));
			if (refer.getUserRoleId().contains(CommonParam.USER_ROLE_COMER)) {
				B_User user1 = userService.selectByPhone(phone);
				if (user1!=null&&!"".equals(user1)) {
					map.put("data", listMap);
					map.put("state", "240");
					map.put("msg", "该手机号已被注册！");
					return map;
				}else {
					B_User user = new B_User();
					if(StringUtils.isNotBlank(refer.getReferPath())){
						user.setReferPath(refer.getReferPath()+"-"+refer.getId());
					}else {
						user.setReferPath(refer.getId()+"");
					}
					user.setRealName(name);
					user.setNickName(name);
					user.setAddr(addr);
					user.setPwd(new MD5Code().getMD5ofStr(pwd));
					user.setHeadImgUrl(CommonParam.USER_HEAD_DEFAULT);
					user.setUserRoleId(CommonParam.USER_ROLE_MEMBER);
			 		user.setMonthpay(0d);
					user.setRegistTime(DateUtils.currtime());
					user.setJifenNo(0.0);
					user.setJifenYes(0.0);
					user.setStatus((short) 0);
					user.setUserType((short) 0);
					user.setComsNo(0d);
					user.setComsYes(0d);
					user.setBalance(0d);
					user.setBonusNum(0d);
					user.setTotalpay(0d);
					user.setSurpluspay(0d);
		    		user.setReferId(Integer.parseInt(userId));
		    		user.setRechargeNum(0d);
		    		user.setLoginName(phone);
		    		user.setPhone(phone);
		    		user.setGardenId(1);
		    		user.setOweNum(0d);
		    		user.setTotalComs(0d);
					user.setMonthComs(0d);
					user.setAlonepay(0d);
					user.setPayment(0d);
					user.setReferNum(0d);
					user.setTotalBonus(0d);
					user.setMonthBonus(0d);
					user.setTotalPayment(0d);
					user.setMonthPayment(0d);
					user.setTotalRefer(0d);
					user.setMonthRefer(0d);
					user.setOfferNum(0d);
					userService.insert(user);
					JavaSmsApi.sendPwd(phone, pwd);
				}
			}else {
				map.put("data", listMap);
				map.put("state", "220");
				map.put("msg", "你没推荐权限");
				return map;
			}
			
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/mergeNum")
	public Map<String, Object> mergeNum(HttpServletRequest request) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			listMap.put("mergeMin", ProConfigMap.configMap.get("mergeMin"));
			listMap.put("mergeMax", ProConfigMap.configMap.get("mergeMax"));
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/upgradeRole")
	public Map<String, Object> upgradeRole(HttpServletRequest request,String replyUsers) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			JSONObject jsonObject = JSONObject.fromObject(replyUsers);  
			ReplyUser replyUser = (ReplyUser) JSONObject.toBean(jsonObject,ReplyUser.class); 
			B_User user = userService.selectByPrimaryKey(replyUser.getUserId());
			Double totalPrice = 0d;
			if (user==null) {
				map.put("data", listMap);
				map.put("state", "210");
				map.put("msg", "未找到当前用户");
				return map;
			}
			if (user.getUserRoleId().contains(CommonParam.USER_ROLE_SALER)&&replyUser.getType()==5) {
				map.put("data", listMap);
				map.put("state", "220");
				map.put("msg", "该用户已是推荐商");
				return map;
			}
			if (user.getUserRoleId().contains(CommonParam.USER_ROLE_SELLER)&&replyUser.getType()==4) {
				map.put("data", listMap);
				map.put("state", "240");
				map.put("msg", "该用户已是商家");
				return map;
			}
			if (replyUser.getType()==2||replyUser.getType()==3) {
				if (user.getUserRoleId().contains(CommonParam.USER_ROLE_CITY)||user.getUserRoleId().contains(CommonParam.USER_ROLE_COUNT)||user.getUserRoleId().contains(CommonParam.USER_ROLE_PRO)) {
					map.put("data", listMap);
					map.put("state", "230");
					map.put("msg", "该用户已是代理");
					return map;
				}
			}
			Short status = 3;
			if (replyUser.getType()==5) {
				totalPrice = 298d;
			}else if (replyUser.getType()==2||replyUser.getType()==3) {
				totalPrice = 1000d;
			}else if (replyUser.getType()==4) {
				status = 0;
			}
			replyUser.setStatus(status);
			replyUser.setName(user.getNickName());
			replyUser.setPhone(user.getPhone());
			replyUser.setTotalPrice(totalPrice);
			replyUser.setCreateTime(new Date());
			userService.insertReplyUser(replyUser);
			if (totalPrice>0) {
				if (replyUser.getPayWay()==1) {
					listMap.put("totalPrice", totalPrice);
				}else if (replyUser.getPayWay()==2) {
					String order_time = DateUtils.currtimeToString12();
					String strRandom = TenpayUtil.buildRandom(6) + "";
					String orderNum= "SJ"+order_time+strRandom+"_"+replyUser.getId();
					String zfbResult = ZfbPayUtil.doAppPay(totalPrice+"", "订单支付", "买了就赚", orderNum);
					listMap.put("zfbResult", zfbResult);
				}
			}
			listMap.put("id", replyUser.getId());
			map.put("data", listMap);
			map.put("state", state);
			map.put("msg", msg);
			return map;
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/replyUser")
	public Map<String, Object> replyUser(HttpServletRequest request,String replyUsers) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			JSONObject jsonObject = JSONObject.fromObject(replyUsers);  
			ReplyUser replyUser = (ReplyUser) JSONObject.toBean(jsonObject,ReplyUser.class); 
			B_User user = userService.selectByPhone(replyUser.getPhone());
			if (user==null) {
				map.put("data", listMap);
				map.put("state", "210");
				map.put("msg", "未找到当前用户");
				return map;
			}
			if (user.getUserRoleId().contains(CommonParam.USER_ROLE_SALER)&&replyUser.getType()==1) {
				map.put("data", listMap);
				map.put("state", "220");
				map.put("msg", "该用户已是业务员");
				return map;
			}
			if (replyUser.getType()==2||replyUser.getType()==3) {
				if (user.getUserRoleId().contains(CommonParam.USER_ROLE_CITY)||user.getUserRoleId().contains(CommonParam.USER_ROLE_COUNT)||user.getUserRoleId().contains(CommonParam.USER_ROLE_PRO)) {
					map.put("data", listMap);
					map.put("state", "230");
					map.put("msg", "该用户已是代理");
					return map;
				}
			}
			replyUser.setUserId(user.getId());
			replyUser.setCreateTime(new Date());
			userService.insertReplyUser(replyUser);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/completeReplyUser")
	public Map<String, Object> completeReplyUser(HttpServletRequest request,String id,String pwd2) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			if (StringUtils.isNotBlank(id)) {
				ReplyUser replyUser = userService.selectReplyUserByPrimaryKey(Integer.parseInt(id));
				B_User user = userService.selectByPrimaryKey(replyUser.getUserId());
				if (user.getBalance()<replyUser.getTotalPrice()) {
					map.put("data", listMap);
					map.put("state", "210");
					map.put("msg", "余额不足");
					return map;
				}
				if (!user.getPwd2().equals(MD5Code.md5_base64(pwd2))) {
					state = "201";
					msg = "二级密码错误";
				}
				user.setBalance(user.getBalance()-replyUser.getTotalPrice());
				userService.updateBalance(user);
				RedPacketRecord record1 = new RedPacketRecord();
				record1.setCreateTime(DateUtils.currtime());
				record1.setGivemoney(replyUser.getTotalPrice());
				record1.setDetailId(replyUser.getId());
				record1.setRedNum(0);
				record1.setUserId(user.getId());
				record1.setType((short) 34);
				redPacketService.insertSelective(record1);
				
				replyUser.setStatus((short) 0);
				userService.updateReplyUser(replyUser);
			}else {
				map.put("data", listMap);
				map.put("state", "220");
				map.put("msg", "id未空");
				return map;
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	@ResponseBody
	@RequestMapping("/myRedPacket")
	public Map<String, Object> myRedPacket(HttpServletRequest request,String userId) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_User user = userService.selectByPrimaryKey(Integer.parseInt(userId));
			Double redPacketMoney = Double.parseDouble(ProConfigMap.configMap.get("redPacketMoney"));
			RedPacket redPacket = redPacketService.selectByUserId(user.getId());
			if (redPacket!=null) {
				Integer redNum = redPacket.getRemaindNum();//红包个数
				Double redPrice=redPacket.getRemaindNum()*redPacketMoney-redPacket.getRemaindmoney();//红包金额
				Double givePrice = redPacket.getReturnamount();//累计赠送
				listMap.put("redNum", redNum);//惠享豆
				listMap.put("redPrice", redPrice);//惠享金额
				listMap.put("givePrice", givePrice);//累计惠享
			}else {
				listMap.put("redNum", 0);
				listMap.put("redPrice", 0);
				listMap.put("givePrice", 0);
			}
			Double totalPrice = user.getRechargeNum();//金额
			listMap.put("totalPrice", totalPrice);//惠享分
			listMap.put("totalPay", user.getTotalpay());//累计消费
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("/updateShop")
	public Map<String, Object> updateShop(HttpServletRequest request,String shops,String imgs) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			JSONObject jsonObject = JSONObject.fromObject(shops);  
			B_Shop shop = (B_Shop) JSONObject.toBean(jsonObject,B_Shop.class);
			userService.updateByPrimaryKeySelective(shop);
			JSONArray specArray = JSONArray.fromObject(imgs);
	        for (int i = 0; i < specArray.size(); i++) {
	        	JSONObject jsonO = specArray.getJSONObject(i);
	        	B_Goods_Img img = (B_Goods_Img) JSONObject.toBean(jsonO, B_Goods_Img.class);
	        	img.setImgUrl(img.getImgUrl().replace(ASSET_URL, ""));
	        	if (img.getId()!=null) {
	        		imgService.updateByPrimaryKeySelective(img);
				}else {
					img.setGoodsId(shop.getId());
					img.setType((short) 4);
					img.setSeq((short) i);
					imgService.saveGoodsImg(img);
				}
	        }
			
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	@ResponseBody
	@RequestMapping("voucherList")
	public Map<String, Object> voucherList(HttpServletRequest request,Integer userId,String orderIds){
		HashMap<String, Object> map1 = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			List<B_User_Voucher> userVouchers = orderService.findMyVoucher(orderIds, userId);
			listMap.put("userVouchers", userVouchers);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map1.put("data", listMap);
		map1.put("state", state);
		map1.put("msg", msg);
		return map1;	
	}
	@ResponseBody
	@RequestMapping("/useVoucher")
	public Map<String, Object> useVoucher(HttpServletRequest request) throws Exception{
		HashMap<String, Object> map = new HashMap<String,Object>();
		Map<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			String voucherIds = request.getParameter("voucherIds");
			String orderIds = request.getParameter("orderIds");
			listMap = orderService.useVoucher(voucherIds, orderIds);
			listMap.put("voucherId", voucherIds);
			listMap.put("orderIds", orderIds);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	@ResponseBody
	@RequestMapping("myVoucherList")
	public Map<String, Object> myVoucherList(HttpServletRequest request,Integer userId){
		HashMap<String, Object> map1 = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			List<B_User_Voucher> userVouchers = voucherService.selectMyVoucherList(userId, (short) 1, null);
			for (Iterator iterator = userVouchers.iterator(); iterator.hasNext();) {
				B_User_Voucher b_User_Voucher = (B_User_Voucher) iterator.next();
				Voucher voucher = voucherService.selectByPrimaryKey(b_User_Voucher.getvId());
				b_User_Voucher.setImgUrl(ASSET_URL+voucher.getHeadImgUrl());
			}
			listMap.put("userVouchers", userVouchers);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map1.put("data", listMap);
		map1.put("state", state);
		map1.put("msg", msg);
		return map1;	
	}
	
	@ResponseBody
	@RequestMapping("paymentToBalance")
	public Map<String, Object> paymentToBalance(HttpServletRequest request,Integer userId,String payment){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			if (StringUtils.isNotBlank(payment)) {
				Double pay = Double.parseDouble(payment);
				B_User user = userService.selectByPrimaryKey(userId);
				if (user.getPayment()<pay) {
					map.put("data", listMap);
					map.put("state", "210");
					map.put("msg", "货款不足");
					return map;	
				}
				Double pbcPrice = Double.parseDouble(ProConfigMap.configMap.get("pbcPrice"));
				Double paymentPbc = Double.parseDouble(ProConfigMap.configMap.get("paymentPbc"));
				Double pbcNum = pay*paymentPbc/pbcPrice;
				Double userPbc = user.getPbcSeller();
				if (pbcNum>userPbc) {
					map.put("data", listMap);
					map.put("state", "211");
					map.put("msg", "赞不足");
					return map;	
				}
				user.setPayment(user.getPayment()-pay);
				userService.updatePayment(user);
				user.setBalance(user.getBalance()+pay);
				userService.updateBalance(user);
				
				user.setPbcSeller(user.getPbcSeller()-pbcNum);
				userService.updatePbcSeller(user);
				
				
				String orderNum = "ZZ"+userId+System.currentTimeMillis();
				RedPacketRecord record = new RedPacketRecord();
				record.setCreateTime(DateUtils.currtime());
				record.setGivemoney(pay);
				record.setRedNum(0);
				record.setOrderNum(orderNum);
				record.setLooked((short) 0);
				record.setUserId(userId);
				record.setType((short) 10);
				redPacketService.insertSelective(record);
				
				RedPacketRecord record1 = new RedPacketRecord();
				record1.setCreateTime(DateUtils.currtime());
				record1.setGivemoney(pbcNum);
				record1.setRedNum(0);
				record1.setOrderNum(orderNum);
				record1.setLooked((short) 0);
				record1.setUserId(userId);
				record1.setType((short) 11);
				redPacketService.insertSelective(record1);
				
				RedPacketRecord record2 = new RedPacketRecord();
				record2.setCreateTime(DateUtils.currtime());
				record2.setGivemoney(pay);
				record2.setRedNum(0);
				record2.setOrderNum(orderNum);
				record2.setLooked((short) 0);
				record2.setUserId(userId);
				record2.setType((short) 20);
				redPacketService.insertSelective(record2);
			}else {
				map.put("data", listMap);
				map.put("state", "220");
				map.put("msg", "未获取到货款");
				return map;
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;	
	}
	@ResponseBody
	@RequestMapping("checkRechargeNum")
	public Map<String, Object> checkRechargeNum(HttpServletRequest request,String orderId){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			if (StringUtils.isNotBlank(orderId)) {
				String[] orderIds = orderId.split("_");
				Double totalPrice = 0d;
				Integer userId = 0;
				for (int i = 0; i < orderIds.length; i++) {
					B_Order order = orderService.selectByPrimaryKey(Integer.parseInt(orderIds[i]));
					totalPrice = order.getTotalPrice();
					userId = order.getBuyUserId();
				}
				B_User user = userService.selectByPrimaryKey(userId);
				if (totalPrice/2>user.getRechargeNum()) {
					listMap.put("rechargeNum", user.getRechargeNum());
				}else {
					listMap.put("rechargeNum", totalPrice/2);
				}
				listMap.put("rechargeBlock", 0);
			}else {
				map.put("data", listMap);
				map.put("state", "220");
				map.put("msg", "未获取到订单");
				return map;
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;	
	}
	@ResponseBody
	@RequestMapping("nowDateTime")
	public Map<String, Object> nowDateTime(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		Long dateTime=(long) 0;
		try {
			 dateTime = System.currentTimeMillis();
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", dateTime);
		map.put("state", state);
		map.put("msg", msg);
		return map;	
	}
	@ResponseBody
	@RequestMapping("turnInPbc")
	public String turnInPbc(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			String phone = request.getParameter("phone");
			if (StringUtils.isNotBlank(phone)) {
				B_User user = userService.selectByPhone(phone);
				if (user==null) {
					state="210";
					msg = "未找到用户";
				}
				Double num = Double.valueOf(request.getParameter("number"));
				user.setPbcBlock(user.getPbcBlock()+num);
				userService.updatePbcBlock(user);
				RedPacketRecord record = new RedPacketRecord();
				record.setCreateTime(DateUtils.currtime());
				record.setGivemoney(num);
				record.setRedNum(0);
				record.setLooked((short) 0);
				record.setUserId(user.getId());
				record.setType((short) 26);
				redPacketService.insertSelective(record);
			}else {
				state="220";
				msg = "手机号为空";
			}
			
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		JSONObject json = JSONObject.fromObject(map);
		return json.toString();	
	}
	@ResponseBody
	@RequestMapping("costPBCToTransformBalance")
	public Map<String, Object> costPBCToTransformBalance(HttpServletRequest request,String payment){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			Double zanNum =  0d;
			if (StringUtils.isNotBlank(payment)) {
				Double pbcPrice = Double.parseDouble(ProConfigMap.configMap.get("pbcPrice"));
				Double paymentPbc = Double.parseDouble(ProConfigMap.configMap.get("paymentPbc"));
				zanNum = Double.parseDouble(payment)*paymentPbc/pbcPrice;
				map.put("data", zanNum);
			}else {
				map.put("state", "210");
				map.put("msg", "请输入货款");
				return map;	
			}
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("state", state);
		map.put("msg", msg);
		return map;	
	}
	@ResponseBody
	@RequestMapping("tradeRecord")
	public Map<String, Object> tradeRecord(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			List<Trade> list = tradeService.selectAllTrade();
			map.put("data", list);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("state", state);
		map.put("msg", msg);
		return map;	
	}
	@ResponseBody
	@RequestMapping("gslcPrice")
	public Map<String, Object> gslcPrice(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			listMap.put("gslcToTg", ProConfigMap.configMap.get("gslcToTg"));
//			listMap.put("gslcPrice", ProConfigMap.configMap.get("gslcPrice"));
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;	
	}
	@ResponseBody
	@RequestMapping("dayK")
	public Map<String, Object> dayK(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			int currentPage = request.getParameter("pages")==null?1:Integer.parseInt(request.getParameter("pages"));
			int pageSize = request.getParameter("pageSize")==null?10:Integer.parseInt(request.getParameter("pageSize"));
			if (currentPage<=0){
				currentPage =1;
			}
			int currentResult = (currentPage-1) * pageSize;
			PageInfo page = new PageInfo();
			page.setShowCount(pageSize);
			page.setCurrentResult(currentResult);
			List<Trade> tradeList = tradeService.selectTradeListPage(page);
			int totalCount = page.getTotalResult();
			int lastPage=0;
			if (totalCount % pageSize==0){
				lastPage = totalCount / pageSize;
			}
			else{
				lastPage =1+ totalCount / pageSize;
			}
			if (currentPage>=lastPage){
				currentPage =lastPage;
			}
			page.setTotalPage(lastPage);
			page.setCurrentPage(currentPage);
			map.put("data", tradeList);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("state", state);
		map.put("msg", msg);
		return map;	
	}
	
	@ResponseBody
	@RequestMapping("gslcOrderListPage")
	public Map<String, Object> gslcOrderListPage(HttpServletRequest request,String buyerIds,String status,String sellerIds,String orderSign,String phone,String userId){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			int currentPage = request.getParameter("pages")==null?1:Integer.parseInt(request.getParameter("pages"));
			int pageSize = 10;
			if (currentPage<=0){
				currentPage =1;
			}
			int currentResult = (currentPage-1) * pageSize;
			PageInfo page = new PageInfo();
			page.setShowCount(pageSize);
			page.setCurrentResult(currentResult);
			Short statu=null;
			if (StringUtils.isNotBlank(status)) {
				statu = Short.parseShort(status);
			}
			Integer buyerId = null;
			if (StringUtils.isNotBlank(buyerIds)) {
				buyerId = Integer.parseInt(buyerIds);
			}
			Integer sellerId = null;
			if (StringUtils.isNotBlank(sellerIds)) {
				sellerId = Integer.parseInt(sellerIds);
			}
			Short sign = null;
			if (StringUtils.isNotBlank(orderSign)) {
				sign = Short.valueOf(orderSign);
			}
			if (sign!=null&&StringUtils.isNotBlank(phone)) {
				B_User seacher = userService.selectByPhone(phone);
				sellerId = seacher.getId();
			}
			List<B_Order> orderList = orderService.selectGslcOrderListPage(page,buyerId,sellerId,statu,(short) 2,null,null,userId);
			for (Iterator iterator = orderList.iterator(); iterator.hasNext();) {
				B_Order order = (B_Order) iterator.next();
				B_User user =userService.selectByPrimaryKey(order.getSellUserId());
				if (user!=null) {
					order.setUserNickName(user.getNickName());
					order.setUserHeadImg(ASSET_URL+user.getHeadImgUrl());
					order.setUserPhone(user.getPhone());
				}
				if (StringUtils.isNotBlank(userId)) {
					if (order.getBuyUserId().equals(Integer.parseInt(userId))) {
						order.setFlag("buy");
					}else if (order.getSellUserId().equals(Integer.parseInt(userId))) {
						order.setFlag("sell");
					}
				}
			}
			int totalCount = page.getTotalResult();
			int lastPage=0;
			if (totalCount % pageSize==0){
				lastPage = totalCount / pageSize;
			}
			else{
				lastPage =1+ totalCount / pageSize;
			}
			if (currentPage>=lastPage){
				currentPage =lastPage;
			}
			page.setTotalPage(lastPage);
			page.setCurrentPage(currentPage);
			map.put("data", orderList);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	@ResponseBody
	@RequestMapping("gslcTop5OrderListPage")
	public Map<String, Object> gslcTop5OrderListPage(HttpServletRequest request,String orderSign){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			int currentPage = request.getParameter("pages")==null?1:Integer.parseInt(request.getParameter("pages"));
			int pageSize = 5;
			if (currentPage<=0){
				currentPage =1;
			}
			int currentResult = (currentPage-1) * pageSize;
			PageInfo page = new PageInfo();
			page.setShowCount(pageSize);
			page.setCurrentResult(currentResult);
			Short sign = null;
			if (StringUtils.isNotBlank(orderSign)) {
				sign = Short.valueOf(orderSign);
			}
			String orderBy = "";
			if (sign==2) {
				orderBy="up";
			}
			if (sign==3) {
				orderBy="down";
			}
			List<B_Order> orderList = orderService.selectGslcOrderListPage(page,null,null,(short) 0,(short) 2,new Date(),orderBy,null);
			Trade trade = tradeService.selectLastTrade();
			for (Iterator iterator = orderList.iterator(); iterator.hasNext();) {
				B_Order b_Order = (B_Order) iterator.next();
				if (b_Order.getPrice()<trade.getStartPrice()) {
					b_Order.setFlag("down");
				}
				if (b_Order.getPrice()>trade.getStartPrice()) {
					b_Order.setFlag("up");
				}
			}
			int totalCount = page.getTotalResult();
			int lastPage=0;
			if (totalCount % pageSize==0){
				lastPage = totalCount / pageSize;
			}
			else{
				lastPage =1+ totalCount / pageSize;
			}
			if (currentPage>=lastPage){
				currentPage =lastPage;
			}
			page.setTotalPage(lastPage);
			page.setCurrentPage(currentPage);
//			listMap.put("page", page);
			map.put("data", orderList);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	@ResponseBody
	@RequestMapping("gslcTradeInfo")
	public Map<String, Object> gslcTradeInfo(HttpServletRequest request,String userId){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			Trade trade = tradeService.selectLastTrade();
			Long totalNum = tradeService.getCountVolumes();
			String flag = NumberUtil.doubleFormat(2, (trade.getCurPrice()-trade.getStartPrice())/trade.getStartPrice()*100, "up")+"%";
			if (trade.getCurPrice()>trade.getStartPrice()) {
				flag = "+"+flag;
			}
			listMap.put("trade", trade);
			listMap.put("totalNum", totalNum);
			listMap.put("flag", flag);
			
			Long tradeGslc = gslcService.selectMyGslcCount(Integer.parseInt(userId), (short) 0);
			listMap.put("tradeGslc", tradeGslc);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	@ResponseBody
	@RequestMapping("gslcCount")
	public Map<String, Object> gslcCount(HttpServletRequest request,String userId){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			if (StringUtils.isNotBlank(userId)) {
				Long gslc0 = gslcService.selectMyGslcCount(Integer.parseInt(userId), (short) 0);
				Long gslc1 = gslcService.selectMyGslcCount(Integer.parseInt(userId), (short) 1);
				Long gslc2 = gslcService.selectMyGslcCount(Integer.parseInt(userId), (short) 2);
				B_User user = userService.selectByPrimaryKey(Integer.parseInt(userId));
				listMap.put("gslcCount", gslc0);
				listMap.put("tgCount", user.getBalance());
			}
			Trade trade = tradeService.selectLastTrade();
			listMap.put("price", trade.getMinPrice());
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	@ResponseBody
	@RequestMapping("myGslcListPage")
	public Map<String, Object> myGslcListPage(HttpServletRequest request,String type,Integer userId,String sort){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			int currentPage = request.getParameter("pages")==null?1:Integer.parseInt(request.getParameter("pages"));
			int pageSize = 10;
			if (currentPage<=0){
				currentPage =1;
			}
			int currentResult = (currentPage-1) * pageSize;
			PageInfo page = new PageInfo();
			page.setShowCount(pageSize);
			page.setCurrentResult(currentResult);
			
			List<Gslc> gslcList = gslcService.selectGslcListPage(page, userId, type,sort);
			
			int totalCount = page.getTotalResult();
			int lastPage=0;
			if (totalCount % pageSize==0){
				lastPage = totalCount / pageSize;
			}
			else{
				lastPage =1+ totalCount / pageSize;
			}
			if (currentPage>=lastPage){
				currentPage =lastPage;
			}
			page.setTotalPage(lastPage);
			page.setCurrentPage(currentPage);
			map.put("data", gslcList);
		} catch (Exception e) {
			state = "500";
			msg = "服务器错误";
			// TODO: handle exception
		}
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	@ResponseBody
	@RequestMapping("gslcInfo")
	public Map<String, Object> gslcInfo(HttpServletRequest request){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			Trade trade = tradeService.selectLastTrade();
			Double gslcPrice = trade.getStartPrice();
			Double minPrice = NumberUtil.doubleFormat(2, gslcPrice*0.9, "up");
			Double maxPrice = NumberUtil.doubleFormat(2, gslcPrice*1.1, "up");
			listMap.put("maxPrice", maxPrice);
			listMap.put("minPrice", minPrice);
			listMap.put("gslcPrice", gslcPrice);
		} catch (Exception e) {
			state = "500";
			msg = "请检查数据是否正确";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("sellGslcOrder")
	public Map<String, Object> sellGslcOrder(HttpServletRequest request,String price,String stock,String gslcIds,String userId,String orderSign){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			String order_time = DateUtils.currtimeToString12();
			String strRandom = TenpayUtil.buildRandom(6) + "";
			String out_order_no= "gslc"+order_time+strRandom;
			
			Trade trade = tradeService.selectLastTrade();
			Double gslcPrice = trade.getStartPrice();
			Double minPrice = NumberUtil.doubleFormat(2, gslcPrice*0.9, "up");
			Double maxPrice = NumberUtil.doubleFormat(2, gslcPrice*1.1, "up");
			Double price1 = NumberUtil.doubleFormat(2, Double.valueOf(price), "up");
			if (price1>maxPrice||price1<minPrice) {
				map.put("state", "210");
				map.put("msg", "价格不合理");
				return map;
			}
			
			B_User user = userService.selectByPrimaryKey(Integer.parseInt(userId));
			String[] goodsIds = gslcIds.split(",");
			if (user.getBonusNum()<goodsIds.length) {
				map.put("state", "220");
				map.put("msg", "已超过每天交易最大数");
				return map;
			}
			
			Double totalPrice = price1*Integer.parseInt(stock);
			B_Order order = new B_Order();
			order.setSellUserId(Integer.parseInt(userId));
			order.setCreateTime(DateUtils.currtime());
			order.setChange_time(DateUtils.currtimeToString10());
			order.setUpdateTime(new Date());
			order.setOrderNum(out_order_no);
			order.setStatus(CommonParam.ORDER_STATUS_NO);
			order.setPayWay((short) 1);
			order.setTotalPrice(totalPrice);
			order.setTotalStock(Integer.parseInt(stock));
			order.setSign((short) 2);
			order.setAssessed((short) 0);
			order.setPrePayment(0d);
			order.setPrice(price1);
			orderService.insert(order);
			
			for (int i = 0; i < goodsIds.length; i++) {
				Integer goodsId = Integer.parseInt(goodsIds[i]);
				Gslc gslc = gslcService.selectByPrimaryKey(goodsId);
				B_Order_Detail order_Detail = new B_Order_Detail();
				order_Detail.setOrderNum(out_order_no);
				order_Detail.setPriceSource(price1);
				order_Detail.setPrice(price1);
				order_Detail.setStock(Integer.parseInt(stock));
				order_Detail.setStatus(CommonParam.ORDER_STATUS_NO);
				order_Detail.setGoodsId(goodsId);
				order_Detail.setGoodsName(gslc.getCode());
				order_Detail.setSign((short) 1);
				order_Detail.setPrePayment(0d);
				order_Detail.setPostPrice(0);
				order_Detail.setCheckRed((short) 0);
				order_Detail.setTotalPrice(price1);
				order_Detail.setUpdateTime(DateUtils.currtime());
				order_Detail.setSign((short) 2);
				detailService.insert(order_Detail);
				gslc.setStatus((short) 1);
				gslc.setUpdateTime(new Date());
				gslcService.updateGslc(gslc);
			}
			user.setBonusNum(user.getBonusNum()-goodsIds.length);
			userService.updateBonusNum(user);
		} catch (Exception e) {
			state = "500";
			msg = "请检查数据是否正确";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	//卖家撤回订单
	@ResponseBody
	@RequestMapping("cancelGslcOrder")
	public Map<String, Object> cancelGslcOrder(HttpServletRequest request,String orderNum){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_Order order = orderService.selectByorderNum(orderNum);
			if (order.getStatus()==0) {
				List<B_Order_Detail> detailList = detailService.selectByorderNum(orderNum);
				B_User seller = userService.selectByPrimaryKey(order.getSellUserId());
				for (Iterator iterator = detailList.iterator(); iterator.hasNext();) {
					B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
					b_Order_Detail.setStatus(CommonParam.ORDER_STATUS_FALSE);
					detailService.updateByPrimaryKey(b_Order_Detail);
					Gslc gslc = gslcService.selectByPrimaryKey(b_Order_Detail.getGoodsId());
					gslc.setStatus((short) 0);
					gslcService.updateGslc(gslc);
				}
				order.setUpdateTime(new Date());
				order.setStatus(CommonParam.ORDER_STATUS_FALSE);
				orderService.updateByPrimaryKeySelective(order);
				
				seller.setBonusNum(seller.getBonusNum()+detailList.size());
				userService.updateBonusNum(seller);
			}else {
				map.put("state", "210");
				map.put("msg", "该订单不能撤回");
				return map;
			}
			
		} catch (Exception e) {
			state = "500";
			msg = "请检查数据是否正确";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	//买家撤销订单
	@ResponseBody
	@RequestMapping("recallGslcOrder")
	public Map<String, Object> recallGslcOrder(HttpServletRequest request,String orderNum){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_Order order = orderService.selectByorderNum(orderNum);
			if (order.getStatus()==1) {
				List<B_Order_Detail> detailList = detailService.selectByorderNum(orderNum);
				B_User buyer = userService.selectByPrimaryKey(order.getBuyUserId());
				for (Iterator iterator = detailList.iterator(); iterator.hasNext();) {
					B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
					b_Order_Detail.setStatus(CommonParam.ORDER_STATUS_NO);
					detailService.updateByPrimaryKey(b_Order_Detail);
//					Gslc gslc = gslcService.selectByPrimaryKey(b_Order_Detail.getGoodsId());
//					gslc.setStatus((short) 0);
//					gslcService.updateGslc(gslc);
				}
				order.setUpdateTime(new Date());
				order.setBuyUserId(0);
				order.setStatus(CommonParam.ORDER_STATUS_NO);
				orderService.updateByPrimaryKeySelective(order);
				
				buyer.setOweNum(buyer.getOweNum()+detailList.size());
				userService.updateOweNum(buyer);
			}else {
				map.put("state", "210");
				map.put("msg", "该订单不能撤销");
				return map;
			}
			
		} catch (Exception e) {
			state = "500";
			msg = "请检查数据是否正确";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	//已支付
	@ResponseBody
	@RequestMapping("payedGslcOrder")
	public Map<String, Object> payedGslcOrder(HttpServletRequest request,String orderNum){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_Order order = orderService.selectByorderNum(orderNum);
			if (order.getStatus()==1) {
				List<B_Order_Detail> detailList = detailService.selectByorderNum(orderNum);
				for (Iterator iterator = detailList.iterator(); iterator.hasNext();) {
					B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
					b_Order_Detail.setStatus(CommonParam.ORDER_STATUS_EMSING);
					detailService.updateByPrimaryKey(b_Order_Detail);
//					Gslc gslc = gslcService.selectByPrimaryKey(b_Order_Detail.getGoodsId());
//					gslc.setStatus((short) 0);
//					gslcService.updateGslc(gslc);
				}
				order.setUpdateTime(new Date());
				order.setStatus(CommonParam.ORDER_STATUS_EMSING);
				orderService.updateByPrimaryKeySelective(order);
			}else {
				map.put("state", "210");
				map.put("msg", "该订单不在出售中");
				return map;
			}
			
		} catch (Exception e) {
			state = "500";
			msg = "请检查数据是否正确";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	//确认发货
	@ResponseBody
	@RequestMapping("sucessGslcOrder")
	public Map<String, Object> sucessGslcOrder(HttpServletRequest request,String orderNum){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_Order order = orderService.selectByorderNum(orderNum);
			if (order.getStatus()==2) {
				List<B_Order_Detail> detailList = detailService.selectByorderNum(orderNum);
				for (Iterator iterator = detailList.iterator(); iterator.hasNext();) {
					B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
					b_Order_Detail.setStatus(CommonParam.ORDER_STATUS_SUCCESS);
					detailService.updateByPrimaryKey(b_Order_Detail);
					Gslc gslc = gslcService.selectByPrimaryKey(b_Order_Detail.getGoodsId());
					gslc.setTradeNum(gslc.getTradeNum()+1);
					if (gslc.getTradeNum()>=100) {
						gslc.setStatus((short) 2);
					}else {
						gslc.setStatus((short) 0);
					}
					gslc.setUserId(order.getBuyUserId());
					gslcService.updateGslc(gslc);
				}
				order.setUpdateTime(new Date());
				order.setChange_time(DateUtils.currtimeToString10());
				order.setStatus(CommonParam.ORDER_STATUS_SUCCESS);
				orderService.updateByPrimaryKeySelective(order);
				
				Trade trade = tradeService.selectLastTrade();
				trade.setVolumes(trade.getVolumes()+order.getTotalStock());
				trade.setCurPrice(order.getPrice());
				trade.setTotalPrice(trade.getTotalPrice()+order.getTotalPrice());
				if (trade.getMinPrice()>order.getPrice()) {
					trade.setMinPrice(order.getPrice());
				}
				if (trade.getMaxPrice()<order.getPrice()) {
					trade.setMaxPrice(order.getPrice());
				}
				trade.setEndPrice(order.getPrice());
				trade.setUpdateTime(new Date());
				tradeService.updateByPrimaryKeySelective(trade);
			}else {
				map.put("state", "210");
				map.put("msg", "该订单不是已付状态");
				return map;
			}
		} catch (Exception e) {
			state = "500";
			msg = "请检查数据是否正确";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	//买入
	@ResponseBody
	@RequestMapping("buyGslcOrder")
	public Map<String, Object> buyGslcOrder(HttpServletRequest request,String orderNum,Integer userId){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_Order order = orderService.selectByorderNum(orderNum);
			if (order.getStatus()==0) {
				List<B_Order_Detail> detailList = detailService.selectByorderNum(orderNum);
				B_User user = userService.selectByPrimaryKey(userId);
				if (user.getBonusNum()<detailList.size()) {
					map.put("state", "220");
					map.put("msg", "已超过每天交易最大数");
					return map;
				}
				for (Iterator iterator = detailList.iterator(); iterator.hasNext();) {
					B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
					b_Order_Detail.setStatus(CommonParam.ORDER_STATUS_NOEMS);
					detailService.updateByPrimaryKey(b_Order_Detail);
					Gslc gslc = gslcService.selectByPrimaryKey(b_Order_Detail.getGoodsId());
					gslc.setStatus((short) 1);
					gslcService.updateGslc(gslc);
				}
				order.setUpdateTime(new Date());
				order.setBuyUserId(userId);
				order.setStatus(CommonParam.ORDER_STATUS_NOEMS);
				orderService.updateByPrimaryKeySelective(order);
				
				user.setOweNum(user.getOweNum()-detailList.size());
				userService.updateOweNum(user);
			}else {
				map.put("state", "210");
				map.put("msg", "该订单已被出售");
				return map;
			}
		} catch (Exception e) {
			state = "500";
			msg = "请检查数据是否正确";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	//申述
	@ResponseBody
	@RequestMapping("complaintGslcOrder")
	public Map<String, Object> complaintGslcOrder(HttpServletRequest request,String orderNum){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_Order order = orderService.selectByorderNum(orderNum);
			if (order.getStatus()==2) {
				List<B_Order_Detail> detailList = detailService.selectByorderNum(orderNum);
				for (Iterator iterator = detailList.iterator(); iterator.hasNext();) {
					B_Order_Detail b_Order_Detail = (B_Order_Detail) iterator.next();
					b_Order_Detail.setStatus(CommonParam.ORDER_STATUS_RECH);
					detailService.updateByPrimaryKey(b_Order_Detail);
				}
				order.setUpdateTime(new Date());
				order.setStatus(CommonParam.ORDER_STATUS_RECH);
				orderService.updateByPrimaryKeySelective(order);
			}else {
				map.put("state", "210");
				map.put("msg", "该订单不是已付状态");
				return map;
			}
		} catch (Exception e) {
			state = "500";
			msg = "请检查数据是否正确";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}	
	
	//银行卡支付宝信息
	@ResponseBody
	@RequestMapping("bankInfo")
	public Map<String, Object> bankInfo(HttpServletRequest request,Integer userId){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			List<B_Bank> bankList = userService.selectBanksByUserId(userId,"yhk");
			if (bankList.size()>0) {
				listMap.put("yhk", bankList.get(0));
			}
			List<B_Bank> zfbList = userService.selectBanksByUserId(userId,"zfb");
			if (zfbList.size()>0) {
				listMap.put("zfb", zfbList.get(0));
			}
		} catch (Exception e) {
			state = "500";
			msg = "请检查数据是否正确";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	//gslc兑换糖果
	@ResponseBody
	@RequestMapping("gslcToTg")
	public Map<String, Object> gslcToTg(HttpServletRequest request,Integer userId,Integer num){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_User user = userService.selectByPrimaryKey(userId);
			List<Gslc> kyGslcs = gslcService.selectAllGslc(userId, "ks", "tradeNum");
			if (num>kyGslcs.size()) {
				map.put("state", "210");
				map.put("msg", "GSLC不足");
				return map;
			}
			if (user.getBonusNum()<num) {
				map.put("state", "220");
				map.put("msg", "已超过每天交易最大数");
				return map;
			}
			String gslcId = "";
			for (int i = 0; i < num; i++) {
				Gslc gslc = kyGslcs.get(i);
				gslc.setUserId(0);
				gslcService.updateGslc(gslc);
				gslcId = gslc.getId()+",";
			}
			Trade trade = tradeService.selectLastTrade();
			Double minPrice = trade.getMinPrice();
			Double totalPrice = minPrice*num;
			user.setBalance(user.getBalance()+totalPrice);
			userService.updateBalance(user);
			
			RedPacketRecord record = new RedPacketRecord();
			record.setCreateTime(DateUtils.currtime());
			record.setGivemoney(totalPrice);
			record.setRedNum(num);
			record.setUserId(userId);
			record.setOrderNum(gslcId);
			record.setType((short) 1);
			redPacketService.insertSelective(record);
			
			user.setBonusNum(user.getBonusNum()-num);
			userService.updateBonusNum(user);
		} catch (Exception e) {
			state = "500";
			msg = "请检查数据是否正确";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("getUserById")
	public Map<String, Object> getUserById(HttpServletRequest request,Integer userId){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_User user = userService.selectByPrimaryKey(userId);
			listMap.put("dayComs", user.getMonthComs());
			listMap.put("totalComs", user.getTotalComs());
			listMap.put("ACode", user.getShareCode1());
			listMap.put("BCode", user.getShareCode2());
			Long leftCount = 0l;
			List<GslcCount> leftList = new ArrayList<GslcCount>();
			List<B_User> leftShare = userService.selectUserByReferId(userId, user.getShareCode1());
			for (Iterator iterator = leftShare.iterator(); iterator.hasNext();) {
				B_User b_User = (B_User) iterator.next();
				Long count = gslcService.selectMyGslcCount(b_User.getId(), null);
				leftCount = leftCount+count;
				GslcCount gslcCount = new GslcCount();
				gslcCount.setPhone(b_User.getPhone());
				gslcCount.setCount(count+"");
				leftList.add(gslcCount);
			}
			Long rightCount = 0l;
			List<GslcCount> rightList = new ArrayList<GslcCount>();
			List<B_User> rightShare = userService.selectUserByReferId(userId, user.getShareCode2());
			for (Iterator iterator = rightShare.iterator(); iterator.hasNext();) {
				B_User b_User = (B_User) iterator.next();
				Long count = gslcService.selectMyGslcCount(b_User.getId(), null);
				rightCount = rightCount+count;
				GslcCount gslcCount = new GslcCount();
				gslcCount.setPhone(b_User.getPhone());
				gslcCount.setCount(count+"");
				rightList.add(gslcCount);
			}
			listMap.put("ACount", leftCount);
			listMap.put("BCount", rightCount);
		} catch (Exception e) {
			state = "500";
			msg = "请检查数据是否正确";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	@ResponseBody
	@RequestMapping("myShare")
	public Map<String, Object> myShare(HttpServletRequest request,Integer userId,String referCode){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			int currentPage = request.getParameter("pages")==null?1:Integer.parseInt(request.getParameter("pages"));
			int pageSize = 100;
			if (currentPage<=0){
				currentPage =1;
			}
			int currentResult = (currentPage-1) * pageSize;
			PageInfo page = new PageInfo();
			page.setShowCount(pageSize);
			page.setCurrentResult(currentResult);
			
			List<GslcCount> gslcCountList = new ArrayList<GslcCount>();
			List<B_User> leftShare = userService.selectUserByReferIdListPage(page, userId, referCode);
			for (Iterator iterator = leftShare.iterator(); iterator.hasNext();) {
				B_User b_User = (B_User) iterator.next();
				Long count = gslcService.selectMyGslcCount(b_User.getId(), null);
				GslcCount gslcCount = new GslcCount();
				gslcCount.setPhone(b_User.getPhone());
				gslcCount.setCount(count+"");
				gslcCountList.add(gslcCount);
			}
			
			int totalCount = page.getTotalResult();
			int lastPage=0;
			if (totalCount % pageSize==0){
				lastPage = totalCount / pageSize;
			}
			else{
				lastPage =1+ totalCount / pageSize;
			}
			if (currentPage>=lastPage){
				currentPage =lastPage;
			}
			page.setTotalPage(lastPage);
			page.setCurrentPage(currentPage);
			map.put("data", gslcCountList);
		} catch (Exception e) {
			state = "500";
			msg = "请检查数据是否正确";
			// TODO: handle exception
		}
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
	
	@ResponseBody
	@RequestMapping("gslcCenter")
	public Map<String, Object> gslcCenter(HttpServletRequest request,Integer userId){
		HashMap<String, Object> map = new HashMap<String,Object>();
		HashMap<String, Object> listMap = new HashMap<String,Object>();
		String state = "200";
		String msg = "ok";
		try {
			B_User user = userService.selectByPrimaryKey(userId);
			
			Double kjyGSLC = user.getBonusNum();
			Double tg = user.getBalance();
			Long totalGSLC = gslcService.selectMyGslcCount(userId, null);
			Double kdp = 0d;
			
			Long jinGSLC = gslcService.selectMyGslcCount(userId, (short) 2);
			Double totalComs = user.getTotalComs();
			Double gmv = Double.valueOf(ProConfigMap.configMap.get("GMV"));
			Double pv = Double.valueOf(ProConfigMap.configMap.get("PV"));
			pv = pv+jinGSLC/10000;
			kdp = NumberUtil.doubleFormat(2, gmv*(100-totalComs/1000)/100*pv, "up");
			
			listMap.put("kjyGSLC", kjyGSLC);
			listMap.put("tg", tg);
			listMap.put("kdp", kdp);
			listMap.put("totalGSLC", totalGSLC);
		} catch (Exception e) {
			state = "500";
			msg = "请检查数据是否正确";
			// TODO: handle exception
		}
		map.put("data", listMap);
		map.put("state", state);
		map.put("msg", msg);
		return map;
	}
}
